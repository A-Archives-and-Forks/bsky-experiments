// Code generated by sqlc. DO NOT EDIT.
// source: get_post_page_cursor.sql

package search_queries

import (
	"context"
	"database/sql"
	"time"
)

const getPostPageCursor = `-- name: GetPostPageCursor :many
SELECT p.id,
    p.text,
    p.parent_post_id,
    p.root_post_id,
    p.author_did,
    p.created_at,
    p.has_embedded_media,
    p.parent_relationship,
    p.sentiment,
    p.sentiment_confidence,
    COALESCE(
        json_agg(l.label) FILTER (
            WHERE l.label IS NOT NULL
        ),
        '[]'
    ) as labels
FROM posts p
    LEFT JOIN post_labels l on l.post_id = p.id
WHERE CASE
        WHEN $2 = '' THEN TRUE
        ELSE p.id < $2
    END
GROUP BY p.id
ORDER BY p.id DESC
LIMIT $1
`

type GetPostPageCursorParams struct {
	Limit  int32       `json:"limit"`
	Cursor interface{} `json:"cursor"`
}

type GetPostPageCursorRow struct {
	ID                  string          `json:"id"`
	Text                string          `json:"text"`
	ParentPostID        sql.NullString  `json:"parent_post_id"`
	RootPostID          sql.NullString  `json:"root_post_id"`
	AuthorDid           string          `json:"author_did"`
	CreatedAt           time.Time       `json:"created_at"`
	HasEmbeddedMedia    bool            `json:"has_embedded_media"`
	ParentRelationship  sql.NullString  `json:"parent_relationship"`
	Sentiment           sql.NullString  `json:"sentiment"`
	SentimentConfidence sql.NullFloat64 `json:"sentiment_confidence"`
	Labels              interface{}     `json:"labels"`
}

func (q *Queries) GetPostPageCursor(ctx context.Context, arg GetPostPageCursorParams) ([]GetPostPageCursorRow, error) {
	rows, err := q.query(ctx, q.getPostPageCursorStmt, getPostPageCursor, arg.Limit, arg.Cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostPageCursorRow
	for rows.Next() {
		var i GetPostPageCursorRow
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.ParentPostID,
			&i.RootPostID,
			&i.AuthorDid,
			&i.CreatedAt,
			&i.HasEmbeddedMedia,
			&i.ParentRelationship,
			&i.Sentiment,
			&i.SentimentConfidence,
			&i.Labels,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

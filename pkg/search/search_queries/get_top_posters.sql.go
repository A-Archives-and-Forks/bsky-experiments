// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: get_top_posters.sql

package search_queries

import (
	"context"
)

const getTopPosters = `-- name: GetTopPosters :many
SELECT COUNT(p.id) AS post_count, a.handle, a.did AS author_did
FROM posts p
JOIN authors a ON p.author_did = a.did
WHERE a.did NOT IN (
    'did:plc:jlqiqmhalnu5af3pf56jryei',  -- Goose.art's Bot  - intern.goose.art
    'did:plc:vuwg6b5ashezjhh6lpnssljm',  -- Spammy Bot       - xnu.kr
    'did:plc:y5smfgzb3oitolqlln3atanl',  -- Retroid Bot      - who-up.bsky.social
    'did:plc:czze3j5772nu6gxdhben5i34',  -- Berduck          - berduck.deepfates.com
    'did:plc:4hqjfn7m6n5hno3doamuhgef',  -- Yui              - yui.syui.ai
    'did:plc:kwmcvt4maab47n7dgvepg4tr',  -- Timestamp Bot    - tick.bsky.social
    'did:plc:6smdztjrq7bjjlojkrnpcnxm',  -- Now Playinb Got  - worbler.bsky.social
    'did:plc:3tyx5envm7fms2jxgvq4pz6e'   -- Deleted Acc      - mavs.bsky.social
)
GROUP BY a.did, a.handle
ORDER BY post_count DESC
LIMIT $1
`

type GetTopPostersRow struct {
	PostCount int64  `json:"post_count"`
	Handle    string `json:"handle"`
	AuthorDid string `json:"author_did"`
}

func (q *Queries) GetTopPosters(ctx context.Context, limit int32) ([]GetTopPostersRow, error) {
	rows, err := q.query(ctx, q.getTopPostersStmt, getTopPosters, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTopPostersRow
	for rows.Next() {
		var i GetTopPostersRow
		if err := rows.Scan(&i.PostCount, &i.Handle, &i.AuthorDid); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

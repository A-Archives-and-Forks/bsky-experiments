// Code generated by sqlc. DO NOT EDIT.
// source: get_posts_with_any_labels_sorted_by_hotness.sql

package search_queries

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

const getPostsPageWithAnyLabelSortedByHotness = `-- name: GetPostsPageWithAnyLabelSortedByHotness :many
SELECT p.id, p.text, p.parent_post_id, p.root_post_id, p.author_did, p.created_at, 
       p.has_embedded_media, p.parent_relationship, p.sentiment, p.sentiment_confidence,
       (COALESCE(pl.like_count, 0) / GREATEST(1, EXTRACT(EPOCH FROM NOW() - p.created_at) / 60) *
        EXP(GREATEST(0, (EXTRACT(EPOCH FROM NOW() - p.created_at) / 60 - 360) / 360)))::FLOAT AS hotness
FROM posts p
JOIN post_labels ON p.id = post_labels.post_id
LEFT JOIN post_likes pl ON p.id = pl.post_id 
WHERE post_labels.label = ANY($1::varchar[]) AND 
      (CASE WHEN $2 = '' THEN TRUE ELSE p.id < $2 END) AND
      p.created_at >= NOW() - make_interval(hours := CAST($3 AS INT))
ORDER BY hotness DESC, p.id DESC
LIMIT $4
`

type GetPostsPageWithAnyLabelSortedByHotnessParams struct {
	Labels   []string    `json:"labels"`
	Cursor   interface{} `json:"cursor"`
	HoursAgo int32       `json:"hours_ago"`
	Limit    int32       `json:"limit"`
}

type GetPostsPageWithAnyLabelSortedByHotnessRow struct {
	ID                  string          `json:"id"`
	Text                string          `json:"text"`
	ParentPostID        sql.NullString  `json:"parent_post_id"`
	RootPostID          sql.NullString  `json:"root_post_id"`
	AuthorDid           string          `json:"author_did"`
	CreatedAt           time.Time       `json:"created_at"`
	HasEmbeddedMedia    bool            `json:"has_embedded_media"`
	ParentRelationship  sql.NullString  `json:"parent_relationship"`
	Sentiment           sql.NullString  `json:"sentiment"`
	SentimentConfidence sql.NullFloat64 `json:"sentiment_confidence"`
	Hotness             float64         `json:"hotness"`
}

func (q *Queries) GetPostsPageWithAnyLabelSortedByHotness(ctx context.Context, arg GetPostsPageWithAnyLabelSortedByHotnessParams) ([]GetPostsPageWithAnyLabelSortedByHotnessRow, error) {
	rows, err := q.query(ctx, q.getPostsPageWithAnyLabelSortedByHotnessStmt, getPostsPageWithAnyLabelSortedByHotness,
		pq.Array(arg.Labels),
		arg.Cursor,
		arg.HoursAgo,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostsPageWithAnyLabelSortedByHotnessRow
	for rows.Next() {
		var i GetPostsPageWithAnyLabelSortedByHotnessRow
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.ParentPostID,
			&i.RootPostID,
			&i.AuthorDid,
			&i.CreatedAt,
			&i.HasEmbeddedMedia,
			&i.ParentRelationship,
			&i.Sentiment,
			&i.SentimentConfidence,
			&i.Hotness,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

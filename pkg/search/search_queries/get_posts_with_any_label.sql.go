// Code generated by sqlc. DO NOT EDIT.
// source: get_posts_with_any_label.sql

package search_queries

import (
	"context"
)

const getPostsPageWithAnyLabel = `-- name: GetPostsPageWithAnyLabel :many
SELECT p.id, p.text, p.parent_post_id, p.root_post_id, p.author_did, p.created_at, 
       p.has_embedded_media, p.parent_relationship, p.sentiment, p.sentiment_confidence
FROM posts p
JOIN post_labels ON p.id = post_labels.post_id 
WHERE post_labels.label = ANY($1) AND 
      (CASE WHEN $2 = '' THEN TRUE ELSE p.id < $2 END) AND
      p.created_at >= NOW() - make_interval(hours := CAST($3 AS INT))
ORDER BY p.id DESC
LIMIT $4
`

type GetPostsPageWithAnyLabelParams struct {
	Labels   string      `json:"labels"`
	Cursor   interface{} `json:"cursor"`
	HoursAgo int32       `json:"hours_ago"`
	Limit    int32       `json:"limit"`
}

func (q *Queries) GetPostsPageWithAnyLabel(ctx context.Context, arg GetPostsPageWithAnyLabelParams) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsPageWithAnyLabelStmt, getPostsPageWithAnyLabel,
		arg.Labels,
		arg.Cursor,
		arg.HoursAgo,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.ParentPostID,
			&i.RootPostID,
			&i.AuthorDid,
			&i.CreatedAt,
			&i.HasEmbeddedMedia,
			&i.ParentRelationship,
			&i.Sentiment,
			&i.SentimentConfidence,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

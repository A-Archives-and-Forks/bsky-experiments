// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: graphd.proto

package graphdconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	graphd "github.com/ericvolp12/bsky-experiments/pkg/graphd/gen"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// GraphDServiceName is the fully-qualified name of the GraphDService service.
	GraphDServiceName = "graphd.GraphDService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// GraphDServiceGetHealthStatusProcedure is the fully-qualified name of the GraphDService's
	// GetHealthStatus RPC.
	GraphDServiceGetHealthStatusProcedure = "/graphd.GraphDService/GetHealthStatus"
	// GraphDServiceGetFollowersProcedure is the fully-qualified name of the GraphDService's
	// GetFollowers RPC.
	GraphDServiceGetFollowersProcedure = "/graphd.GraphDService/GetFollowers"
	// GraphDServiceGetFollowingProcedure is the fully-qualified name of the GraphDService's
	// GetFollowing RPC.
	GraphDServiceGetFollowingProcedure = "/graphd.GraphDService/GetFollowing"
	// GraphDServiceGetFollowersNotFollowingProcedure is the fully-qualified name of the GraphDService's
	// GetFollowersNotFollowing RPC.
	GraphDServiceGetFollowersNotFollowingProcedure = "/graphd.GraphDService/GetFollowersNotFollowing"
	// GraphDServiceGetDoesFollowProcedure is the fully-qualified name of the GraphDService's
	// GetDoesFollow RPC.
	GraphDServiceGetDoesFollowProcedure = "/graphd.GraphDService/GetDoesFollow"
	// GraphDServiceGetAreMootsProcedure is the fully-qualified name of the GraphDService's GetAreMoots
	// RPC.
	GraphDServiceGetAreMootsProcedure = "/graphd.GraphDService/GetAreMoots"
	// GraphDServiceGetIntersectFollowersProcedure is the fully-qualified name of the GraphDService's
	// GetIntersectFollowers RPC.
	GraphDServiceGetIntersectFollowersProcedure = "/graphd.GraphDService/GetIntersectFollowers"
	// GraphDServiceGetFollowsFollowingProcedure is the fully-qualified name of the GraphDService's
	// GetFollowsFollowing RPC.
	GraphDServiceGetFollowsFollowingProcedure = "/graphd.GraphDService/GetFollowsFollowing"
	// GraphDServiceGetIntersectFollowingProcedure is the fully-qualified name of the GraphDService's
	// GetIntersectFollowing RPC.
	GraphDServiceGetIntersectFollowingProcedure = "/graphd.GraphDService/GetIntersectFollowing"
	// GraphDServiceGetMootsProcedure is the fully-qualified name of the GraphDService's GetMoots RPC.
	GraphDServiceGetMootsProcedure = "/graphd.GraphDService/GetMoots"
	// GraphDServicePostFollowProcedure is the fully-qualified name of the GraphDService's PostFollow
	// RPC.
	GraphDServicePostFollowProcedure = "/graphd.GraphDService/PostFollow"
	// GraphDServicePostFollowsProcedure is the fully-qualified name of the GraphDService's PostFollows
	// RPC.
	GraphDServicePostFollowsProcedure = "/graphd.GraphDService/PostFollows"
	// GraphDServicePostUnfollowProcedure is the fully-qualified name of the GraphDService's
	// PostUnfollow RPC.
	GraphDServicePostUnfollowProcedure = "/graphd.GraphDService/PostUnfollow"
	// GraphDServicePostUnfollowsProcedure is the fully-qualified name of the GraphDService's
	// PostUnfollows RPC.
	GraphDServicePostUnfollowsProcedure = "/graphd.GraphDService/PostUnfollows"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	graphDServiceServiceDescriptor                        = graphd.File_graphd_proto.Services().ByName("GraphDService")
	graphDServiceGetHealthStatusMethodDescriptor          = graphDServiceServiceDescriptor.Methods().ByName("GetHealthStatus")
	graphDServiceGetFollowersMethodDescriptor             = graphDServiceServiceDescriptor.Methods().ByName("GetFollowers")
	graphDServiceGetFollowingMethodDescriptor             = graphDServiceServiceDescriptor.Methods().ByName("GetFollowing")
	graphDServiceGetFollowersNotFollowingMethodDescriptor = graphDServiceServiceDescriptor.Methods().ByName("GetFollowersNotFollowing")
	graphDServiceGetDoesFollowMethodDescriptor            = graphDServiceServiceDescriptor.Methods().ByName("GetDoesFollow")
	graphDServiceGetAreMootsMethodDescriptor              = graphDServiceServiceDescriptor.Methods().ByName("GetAreMoots")
	graphDServiceGetIntersectFollowersMethodDescriptor    = graphDServiceServiceDescriptor.Methods().ByName("GetIntersectFollowers")
	graphDServiceGetFollowsFollowingMethodDescriptor      = graphDServiceServiceDescriptor.Methods().ByName("GetFollowsFollowing")
	graphDServiceGetIntersectFollowingMethodDescriptor    = graphDServiceServiceDescriptor.Methods().ByName("GetIntersectFollowing")
	graphDServiceGetMootsMethodDescriptor                 = graphDServiceServiceDescriptor.Methods().ByName("GetMoots")
	graphDServicePostFollowMethodDescriptor               = graphDServiceServiceDescriptor.Methods().ByName("PostFollow")
	graphDServicePostFollowsMethodDescriptor              = graphDServiceServiceDescriptor.Methods().ByName("PostFollows")
	graphDServicePostUnfollowMethodDescriptor             = graphDServiceServiceDescriptor.Methods().ByName("PostUnfollow")
	graphDServicePostUnfollowsMethodDescriptor            = graphDServiceServiceDescriptor.Methods().ByName("PostUnfollows")
)

// GraphDServiceClient is a client for the graphd.GraphDService service.
type GraphDServiceClient interface {
	GetHealthStatus(context.Context, *connect.Request[graphd.GetHealthStatusRequest]) (*connect.Response[graphd.GetHealthStatusResponse], error)
	GetFollowers(context.Context, *connect.Request[graphd.GetFollowersRequest]) (*connect.Response[graphd.GetFollowersResponse], error)
	GetFollowing(context.Context, *connect.Request[graphd.GetFollowingRequest]) (*connect.Response[graphd.GetFollowingResponse], error)
	GetFollowersNotFollowing(context.Context, *connect.Request[graphd.GetFollowersNotFollowingRequest]) (*connect.Response[graphd.GetFollowersNotFollowingResponse], error)
	GetDoesFollow(context.Context, *connect.Request[graphd.GetDoesFollowRequest]) (*connect.Response[graphd.GetDoesFollowResponse], error)
	GetAreMoots(context.Context, *connect.Request[graphd.GetAreMootsRequest]) (*connect.Response[graphd.GetAreMootsResponse], error)
	GetIntersectFollowers(context.Context, *connect.Request[graphd.GetIntersectFollowersRequest]) (*connect.Response[graphd.GetIntersectFollowersResponse], error)
	GetFollowsFollowing(context.Context, *connect.Request[graphd.GetFollowsFollowingRequest]) (*connect.Response[graphd.GetFollowsFollowingResponse], error)
	GetIntersectFollowing(context.Context, *connect.Request[graphd.GetIntersectFollowingRequest]) (*connect.Response[graphd.GetIntersectFollowingResponse], error)
	GetMoots(context.Context, *connect.Request[graphd.GetMootsRequest]) (*connect.Response[graphd.GetMootsResponse], error)
	PostFollow(context.Context, *connect.Request[graphd.PostFollowRequest]) (*connect.Response[graphd.PostFollowResponse], error)
	PostFollows(context.Context, *connect.Request[graphd.PostFollowsRequest]) (*connect.Response[graphd.PostFollowsResponse], error)
	PostUnfollow(context.Context, *connect.Request[graphd.PostUnfollowRequest]) (*connect.Response[graphd.PostUnfollowResponse], error)
	PostUnfollows(context.Context, *connect.Request[graphd.PostUnfollowsRequest]) (*connect.Response[graphd.PostUnfollowsResponse], error)
}

// NewGraphDServiceClient constructs a client for the graphd.GraphDService service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewGraphDServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) GraphDServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &graphDServiceClient{
		getHealthStatus: connect.NewClient[graphd.GetHealthStatusRequest, graphd.GetHealthStatusResponse](
			httpClient,
			baseURL+GraphDServiceGetHealthStatusProcedure,
			connect.WithSchema(graphDServiceGetHealthStatusMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFollowers: connect.NewClient[graphd.GetFollowersRequest, graphd.GetFollowersResponse](
			httpClient,
			baseURL+GraphDServiceGetFollowersProcedure,
			connect.WithSchema(graphDServiceGetFollowersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFollowing: connect.NewClient[graphd.GetFollowingRequest, graphd.GetFollowingResponse](
			httpClient,
			baseURL+GraphDServiceGetFollowingProcedure,
			connect.WithSchema(graphDServiceGetFollowingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFollowersNotFollowing: connect.NewClient[graphd.GetFollowersNotFollowingRequest, graphd.GetFollowersNotFollowingResponse](
			httpClient,
			baseURL+GraphDServiceGetFollowersNotFollowingProcedure,
			connect.WithSchema(graphDServiceGetFollowersNotFollowingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getDoesFollow: connect.NewClient[graphd.GetDoesFollowRequest, graphd.GetDoesFollowResponse](
			httpClient,
			baseURL+GraphDServiceGetDoesFollowProcedure,
			connect.WithSchema(graphDServiceGetDoesFollowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getAreMoots: connect.NewClient[graphd.GetAreMootsRequest, graphd.GetAreMootsResponse](
			httpClient,
			baseURL+GraphDServiceGetAreMootsProcedure,
			connect.WithSchema(graphDServiceGetAreMootsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getIntersectFollowers: connect.NewClient[graphd.GetIntersectFollowersRequest, graphd.GetIntersectFollowersResponse](
			httpClient,
			baseURL+GraphDServiceGetIntersectFollowersProcedure,
			connect.WithSchema(graphDServiceGetIntersectFollowersMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getFollowsFollowing: connect.NewClient[graphd.GetFollowsFollowingRequest, graphd.GetFollowsFollowingResponse](
			httpClient,
			baseURL+GraphDServiceGetFollowsFollowingProcedure,
			connect.WithSchema(graphDServiceGetFollowsFollowingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getIntersectFollowing: connect.NewClient[graphd.GetIntersectFollowingRequest, graphd.GetIntersectFollowingResponse](
			httpClient,
			baseURL+GraphDServiceGetIntersectFollowingProcedure,
			connect.WithSchema(graphDServiceGetIntersectFollowingMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		getMoots: connect.NewClient[graphd.GetMootsRequest, graphd.GetMootsResponse](
			httpClient,
			baseURL+GraphDServiceGetMootsProcedure,
			connect.WithSchema(graphDServiceGetMootsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postFollow: connect.NewClient[graphd.PostFollowRequest, graphd.PostFollowResponse](
			httpClient,
			baseURL+GraphDServicePostFollowProcedure,
			connect.WithSchema(graphDServicePostFollowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postFollows: connect.NewClient[graphd.PostFollowsRequest, graphd.PostFollowsResponse](
			httpClient,
			baseURL+GraphDServicePostFollowsProcedure,
			connect.WithSchema(graphDServicePostFollowsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postUnfollow: connect.NewClient[graphd.PostUnfollowRequest, graphd.PostUnfollowResponse](
			httpClient,
			baseURL+GraphDServicePostUnfollowProcedure,
			connect.WithSchema(graphDServicePostUnfollowMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		postUnfollows: connect.NewClient[graphd.PostUnfollowsRequest, graphd.PostUnfollowsResponse](
			httpClient,
			baseURL+GraphDServicePostUnfollowsProcedure,
			connect.WithSchema(graphDServicePostUnfollowsMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// graphDServiceClient implements GraphDServiceClient.
type graphDServiceClient struct {
	getHealthStatus          *connect.Client[graphd.GetHealthStatusRequest, graphd.GetHealthStatusResponse]
	getFollowers             *connect.Client[graphd.GetFollowersRequest, graphd.GetFollowersResponse]
	getFollowing             *connect.Client[graphd.GetFollowingRequest, graphd.GetFollowingResponse]
	getFollowersNotFollowing *connect.Client[graphd.GetFollowersNotFollowingRequest, graphd.GetFollowersNotFollowingResponse]
	getDoesFollow            *connect.Client[graphd.GetDoesFollowRequest, graphd.GetDoesFollowResponse]
	getAreMoots              *connect.Client[graphd.GetAreMootsRequest, graphd.GetAreMootsResponse]
	getIntersectFollowers    *connect.Client[graphd.GetIntersectFollowersRequest, graphd.GetIntersectFollowersResponse]
	getFollowsFollowing      *connect.Client[graphd.GetFollowsFollowingRequest, graphd.GetFollowsFollowingResponse]
	getIntersectFollowing    *connect.Client[graphd.GetIntersectFollowingRequest, graphd.GetIntersectFollowingResponse]
	getMoots                 *connect.Client[graphd.GetMootsRequest, graphd.GetMootsResponse]
	postFollow               *connect.Client[graphd.PostFollowRequest, graphd.PostFollowResponse]
	postFollows              *connect.Client[graphd.PostFollowsRequest, graphd.PostFollowsResponse]
	postUnfollow             *connect.Client[graphd.PostUnfollowRequest, graphd.PostUnfollowResponse]
	postUnfollows            *connect.Client[graphd.PostUnfollowsRequest, graphd.PostUnfollowsResponse]
}

// GetHealthStatus calls graphd.GraphDService.GetHealthStatus.
func (c *graphDServiceClient) GetHealthStatus(ctx context.Context, req *connect.Request[graphd.GetHealthStatusRequest]) (*connect.Response[graphd.GetHealthStatusResponse], error) {
	return c.getHealthStatus.CallUnary(ctx, req)
}

// GetFollowers calls graphd.GraphDService.GetFollowers.
func (c *graphDServiceClient) GetFollowers(ctx context.Context, req *connect.Request[graphd.GetFollowersRequest]) (*connect.Response[graphd.GetFollowersResponse], error) {
	return c.getFollowers.CallUnary(ctx, req)
}

// GetFollowing calls graphd.GraphDService.GetFollowing.
func (c *graphDServiceClient) GetFollowing(ctx context.Context, req *connect.Request[graphd.GetFollowingRequest]) (*connect.Response[graphd.GetFollowingResponse], error) {
	return c.getFollowing.CallUnary(ctx, req)
}

// GetFollowersNotFollowing calls graphd.GraphDService.GetFollowersNotFollowing.
func (c *graphDServiceClient) GetFollowersNotFollowing(ctx context.Context, req *connect.Request[graphd.GetFollowersNotFollowingRequest]) (*connect.Response[graphd.GetFollowersNotFollowingResponse], error) {
	return c.getFollowersNotFollowing.CallUnary(ctx, req)
}

// GetDoesFollow calls graphd.GraphDService.GetDoesFollow.
func (c *graphDServiceClient) GetDoesFollow(ctx context.Context, req *connect.Request[graphd.GetDoesFollowRequest]) (*connect.Response[graphd.GetDoesFollowResponse], error) {
	return c.getDoesFollow.CallUnary(ctx, req)
}

// GetAreMoots calls graphd.GraphDService.GetAreMoots.
func (c *graphDServiceClient) GetAreMoots(ctx context.Context, req *connect.Request[graphd.GetAreMootsRequest]) (*connect.Response[graphd.GetAreMootsResponse], error) {
	return c.getAreMoots.CallUnary(ctx, req)
}

// GetIntersectFollowers calls graphd.GraphDService.GetIntersectFollowers.
func (c *graphDServiceClient) GetIntersectFollowers(ctx context.Context, req *connect.Request[graphd.GetIntersectFollowersRequest]) (*connect.Response[graphd.GetIntersectFollowersResponse], error) {
	return c.getIntersectFollowers.CallUnary(ctx, req)
}

// GetFollowsFollowing calls graphd.GraphDService.GetFollowsFollowing.
func (c *graphDServiceClient) GetFollowsFollowing(ctx context.Context, req *connect.Request[graphd.GetFollowsFollowingRequest]) (*connect.Response[graphd.GetFollowsFollowingResponse], error) {
	return c.getFollowsFollowing.CallUnary(ctx, req)
}

// GetIntersectFollowing calls graphd.GraphDService.GetIntersectFollowing.
func (c *graphDServiceClient) GetIntersectFollowing(ctx context.Context, req *connect.Request[graphd.GetIntersectFollowingRequest]) (*connect.Response[graphd.GetIntersectFollowingResponse], error) {
	return c.getIntersectFollowing.CallUnary(ctx, req)
}

// GetMoots calls graphd.GraphDService.GetMoots.
func (c *graphDServiceClient) GetMoots(ctx context.Context, req *connect.Request[graphd.GetMootsRequest]) (*connect.Response[graphd.GetMootsResponse], error) {
	return c.getMoots.CallUnary(ctx, req)
}

// PostFollow calls graphd.GraphDService.PostFollow.
func (c *graphDServiceClient) PostFollow(ctx context.Context, req *connect.Request[graphd.PostFollowRequest]) (*connect.Response[graphd.PostFollowResponse], error) {
	return c.postFollow.CallUnary(ctx, req)
}

// PostFollows calls graphd.GraphDService.PostFollows.
func (c *graphDServiceClient) PostFollows(ctx context.Context, req *connect.Request[graphd.PostFollowsRequest]) (*connect.Response[graphd.PostFollowsResponse], error) {
	return c.postFollows.CallUnary(ctx, req)
}

// PostUnfollow calls graphd.GraphDService.PostUnfollow.
func (c *graphDServiceClient) PostUnfollow(ctx context.Context, req *connect.Request[graphd.PostUnfollowRequest]) (*connect.Response[graphd.PostUnfollowResponse], error) {
	return c.postUnfollow.CallUnary(ctx, req)
}

// PostUnfollows calls graphd.GraphDService.PostUnfollows.
func (c *graphDServiceClient) PostUnfollows(ctx context.Context, req *connect.Request[graphd.PostUnfollowsRequest]) (*connect.Response[graphd.PostUnfollowsResponse], error) {
	return c.postUnfollows.CallUnary(ctx, req)
}

// GraphDServiceHandler is an implementation of the graphd.GraphDService service.
type GraphDServiceHandler interface {
	GetHealthStatus(context.Context, *connect.Request[graphd.GetHealthStatusRequest]) (*connect.Response[graphd.GetHealthStatusResponse], error)
	GetFollowers(context.Context, *connect.Request[graphd.GetFollowersRequest]) (*connect.Response[graphd.GetFollowersResponse], error)
	GetFollowing(context.Context, *connect.Request[graphd.GetFollowingRequest]) (*connect.Response[graphd.GetFollowingResponse], error)
	GetFollowersNotFollowing(context.Context, *connect.Request[graphd.GetFollowersNotFollowingRequest]) (*connect.Response[graphd.GetFollowersNotFollowingResponse], error)
	GetDoesFollow(context.Context, *connect.Request[graphd.GetDoesFollowRequest]) (*connect.Response[graphd.GetDoesFollowResponse], error)
	GetAreMoots(context.Context, *connect.Request[graphd.GetAreMootsRequest]) (*connect.Response[graphd.GetAreMootsResponse], error)
	GetIntersectFollowers(context.Context, *connect.Request[graphd.GetIntersectFollowersRequest]) (*connect.Response[graphd.GetIntersectFollowersResponse], error)
	GetFollowsFollowing(context.Context, *connect.Request[graphd.GetFollowsFollowingRequest]) (*connect.Response[graphd.GetFollowsFollowingResponse], error)
	GetIntersectFollowing(context.Context, *connect.Request[graphd.GetIntersectFollowingRequest]) (*connect.Response[graphd.GetIntersectFollowingResponse], error)
	GetMoots(context.Context, *connect.Request[graphd.GetMootsRequest]) (*connect.Response[graphd.GetMootsResponse], error)
	PostFollow(context.Context, *connect.Request[graphd.PostFollowRequest]) (*connect.Response[graphd.PostFollowResponse], error)
	PostFollows(context.Context, *connect.Request[graphd.PostFollowsRequest]) (*connect.Response[graphd.PostFollowsResponse], error)
	PostUnfollow(context.Context, *connect.Request[graphd.PostUnfollowRequest]) (*connect.Response[graphd.PostUnfollowResponse], error)
	PostUnfollows(context.Context, *connect.Request[graphd.PostUnfollowsRequest]) (*connect.Response[graphd.PostUnfollowsResponse], error)
}

// NewGraphDServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewGraphDServiceHandler(svc GraphDServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	graphDServiceGetHealthStatusHandler := connect.NewUnaryHandler(
		GraphDServiceGetHealthStatusProcedure,
		svc.GetHealthStatus,
		connect.WithSchema(graphDServiceGetHealthStatusMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServiceGetFollowersHandler := connect.NewUnaryHandler(
		GraphDServiceGetFollowersProcedure,
		svc.GetFollowers,
		connect.WithSchema(graphDServiceGetFollowersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServiceGetFollowingHandler := connect.NewUnaryHandler(
		GraphDServiceGetFollowingProcedure,
		svc.GetFollowing,
		connect.WithSchema(graphDServiceGetFollowingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServiceGetFollowersNotFollowingHandler := connect.NewUnaryHandler(
		GraphDServiceGetFollowersNotFollowingProcedure,
		svc.GetFollowersNotFollowing,
		connect.WithSchema(graphDServiceGetFollowersNotFollowingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServiceGetDoesFollowHandler := connect.NewUnaryHandler(
		GraphDServiceGetDoesFollowProcedure,
		svc.GetDoesFollow,
		connect.WithSchema(graphDServiceGetDoesFollowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServiceGetAreMootsHandler := connect.NewUnaryHandler(
		GraphDServiceGetAreMootsProcedure,
		svc.GetAreMoots,
		connect.WithSchema(graphDServiceGetAreMootsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServiceGetIntersectFollowersHandler := connect.NewUnaryHandler(
		GraphDServiceGetIntersectFollowersProcedure,
		svc.GetIntersectFollowers,
		connect.WithSchema(graphDServiceGetIntersectFollowersMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServiceGetFollowsFollowingHandler := connect.NewUnaryHandler(
		GraphDServiceGetFollowsFollowingProcedure,
		svc.GetFollowsFollowing,
		connect.WithSchema(graphDServiceGetFollowsFollowingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServiceGetIntersectFollowingHandler := connect.NewUnaryHandler(
		GraphDServiceGetIntersectFollowingProcedure,
		svc.GetIntersectFollowing,
		connect.WithSchema(graphDServiceGetIntersectFollowingMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServiceGetMootsHandler := connect.NewUnaryHandler(
		GraphDServiceGetMootsProcedure,
		svc.GetMoots,
		connect.WithSchema(graphDServiceGetMootsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServicePostFollowHandler := connect.NewUnaryHandler(
		GraphDServicePostFollowProcedure,
		svc.PostFollow,
		connect.WithSchema(graphDServicePostFollowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServicePostFollowsHandler := connect.NewUnaryHandler(
		GraphDServicePostFollowsProcedure,
		svc.PostFollows,
		connect.WithSchema(graphDServicePostFollowsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServicePostUnfollowHandler := connect.NewUnaryHandler(
		GraphDServicePostUnfollowProcedure,
		svc.PostUnfollow,
		connect.WithSchema(graphDServicePostUnfollowMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	graphDServicePostUnfollowsHandler := connect.NewUnaryHandler(
		GraphDServicePostUnfollowsProcedure,
		svc.PostUnfollows,
		connect.WithSchema(graphDServicePostUnfollowsMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/graphd.GraphDService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case GraphDServiceGetHealthStatusProcedure:
			graphDServiceGetHealthStatusHandler.ServeHTTP(w, r)
		case GraphDServiceGetFollowersProcedure:
			graphDServiceGetFollowersHandler.ServeHTTP(w, r)
		case GraphDServiceGetFollowingProcedure:
			graphDServiceGetFollowingHandler.ServeHTTP(w, r)
		case GraphDServiceGetFollowersNotFollowingProcedure:
			graphDServiceGetFollowersNotFollowingHandler.ServeHTTP(w, r)
		case GraphDServiceGetDoesFollowProcedure:
			graphDServiceGetDoesFollowHandler.ServeHTTP(w, r)
		case GraphDServiceGetAreMootsProcedure:
			graphDServiceGetAreMootsHandler.ServeHTTP(w, r)
		case GraphDServiceGetIntersectFollowersProcedure:
			graphDServiceGetIntersectFollowersHandler.ServeHTTP(w, r)
		case GraphDServiceGetFollowsFollowingProcedure:
			graphDServiceGetFollowsFollowingHandler.ServeHTTP(w, r)
		case GraphDServiceGetIntersectFollowingProcedure:
			graphDServiceGetIntersectFollowingHandler.ServeHTTP(w, r)
		case GraphDServiceGetMootsProcedure:
			graphDServiceGetMootsHandler.ServeHTTP(w, r)
		case GraphDServicePostFollowProcedure:
			graphDServicePostFollowHandler.ServeHTTP(w, r)
		case GraphDServicePostFollowsProcedure:
			graphDServicePostFollowsHandler.ServeHTTP(w, r)
		case GraphDServicePostUnfollowProcedure:
			graphDServicePostUnfollowHandler.ServeHTTP(w, r)
		case GraphDServicePostUnfollowsProcedure:
			graphDServicePostUnfollowsHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedGraphDServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedGraphDServiceHandler struct{}

func (UnimplementedGraphDServiceHandler) GetHealthStatus(context.Context, *connect.Request[graphd.GetHealthStatusRequest]) (*connect.Response[graphd.GetHealthStatusResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetHealthStatus is not implemented"))
}

func (UnimplementedGraphDServiceHandler) GetFollowers(context.Context, *connect.Request[graphd.GetFollowersRequest]) (*connect.Response[graphd.GetFollowersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetFollowers is not implemented"))
}

func (UnimplementedGraphDServiceHandler) GetFollowing(context.Context, *connect.Request[graphd.GetFollowingRequest]) (*connect.Response[graphd.GetFollowingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetFollowing is not implemented"))
}

func (UnimplementedGraphDServiceHandler) GetFollowersNotFollowing(context.Context, *connect.Request[graphd.GetFollowersNotFollowingRequest]) (*connect.Response[graphd.GetFollowersNotFollowingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetFollowersNotFollowing is not implemented"))
}

func (UnimplementedGraphDServiceHandler) GetDoesFollow(context.Context, *connect.Request[graphd.GetDoesFollowRequest]) (*connect.Response[graphd.GetDoesFollowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetDoesFollow is not implemented"))
}

func (UnimplementedGraphDServiceHandler) GetAreMoots(context.Context, *connect.Request[graphd.GetAreMootsRequest]) (*connect.Response[graphd.GetAreMootsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetAreMoots is not implemented"))
}

func (UnimplementedGraphDServiceHandler) GetIntersectFollowers(context.Context, *connect.Request[graphd.GetIntersectFollowersRequest]) (*connect.Response[graphd.GetIntersectFollowersResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetIntersectFollowers is not implemented"))
}

func (UnimplementedGraphDServiceHandler) GetFollowsFollowing(context.Context, *connect.Request[graphd.GetFollowsFollowingRequest]) (*connect.Response[graphd.GetFollowsFollowingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetFollowsFollowing is not implemented"))
}

func (UnimplementedGraphDServiceHandler) GetIntersectFollowing(context.Context, *connect.Request[graphd.GetIntersectFollowingRequest]) (*connect.Response[graphd.GetIntersectFollowingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetIntersectFollowing is not implemented"))
}

func (UnimplementedGraphDServiceHandler) GetMoots(context.Context, *connect.Request[graphd.GetMootsRequest]) (*connect.Response[graphd.GetMootsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.GetMoots is not implemented"))
}

func (UnimplementedGraphDServiceHandler) PostFollow(context.Context, *connect.Request[graphd.PostFollowRequest]) (*connect.Response[graphd.PostFollowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.PostFollow is not implemented"))
}

func (UnimplementedGraphDServiceHandler) PostFollows(context.Context, *connect.Request[graphd.PostFollowsRequest]) (*connect.Response[graphd.PostFollowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.PostFollows is not implemented"))
}

func (UnimplementedGraphDServiceHandler) PostUnfollow(context.Context, *connect.Request[graphd.PostUnfollowRequest]) (*connect.Response[graphd.PostUnfollowResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.PostUnfollow is not implemented"))
}

func (UnimplementedGraphDServiceHandler) PostUnfollows(context.Context, *connect.Request[graphd.PostUnfollowsRequest]) (*connect.Response[graphd.PostUnfollowsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("graphd.GraphDService.PostUnfollows is not implemented"))
}

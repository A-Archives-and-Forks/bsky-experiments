// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package stats_queries

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteOldHLLStmt, err = db.PrepareContext(ctx, deleteOldHLL); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteOldHLL: %w", err)
	}
	if q.getActiveHLLMetricsStmt, err = db.PrepareContext(ctx, getActiveHLLMetrics); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveHLLMetrics: %w", err)
	}
	if q.getAllDailyStatsSummariesStmt, err = db.PrepareContext(ctx, getAllDailyStatsSummaries); err != nil {
		return nil, fmt.Errorf("error preparing query GetAllDailyStatsSummaries: %w", err)
	}
	if q.getCursorStmt, err = db.PrepareContext(ctx, getCursor); err != nil {
		return nil, fmt.Errorf("error preparing query GetCursor: %w", err)
	}
	if q.getDailyStatsSummaryStmt, err = db.PrepareContext(ctx, getDailyStatsSummary); err != nil {
		return nil, fmt.Errorf("error preparing query GetDailyStatsSummary: %w", err)
	}
	if q.getHLLStmt, err = db.PrepareContext(ctx, getHLL); err != nil {
		return nil, fmt.Errorf("error preparing query GetHLL: %w", err)
	}
	if q.getHLLsByMetricInRangeStmt, err = db.PrepareContext(ctx, getHLLsByMetricInRange); err != nil {
		return nil, fmt.Errorf("error preparing query GetHLLsByMetricInRange: %w", err)
	}
	if q.insertDailyStatsSummaryStmt, err = db.PrepareContext(ctx, insertDailyStatsSummary); err != nil {
		return nil, fmt.Errorf("error preparing query InsertDailyStatsSummary: %w", err)
	}
	if q.upsertCursorStmt, err = db.PrepareContext(ctx, upsertCursor); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertCursor: %w", err)
	}
	if q.upsertHLLStmt, err = db.PrepareContext(ctx, upsertHLL); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertHLL: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteOldHLLStmt != nil {
		if cerr := q.deleteOldHLLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteOldHLLStmt: %w", cerr)
		}
	}
	if q.getActiveHLLMetricsStmt != nil {
		if cerr := q.getActiveHLLMetricsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveHLLMetricsStmt: %w", cerr)
		}
	}
	if q.getAllDailyStatsSummariesStmt != nil {
		if cerr := q.getAllDailyStatsSummariesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getAllDailyStatsSummariesStmt: %w", cerr)
		}
	}
	if q.getCursorStmt != nil {
		if cerr := q.getCursorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCursorStmt: %w", cerr)
		}
	}
	if q.getDailyStatsSummaryStmt != nil {
		if cerr := q.getDailyStatsSummaryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDailyStatsSummaryStmt: %w", cerr)
		}
	}
	if q.getHLLStmt != nil {
		if cerr := q.getHLLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHLLStmt: %w", cerr)
		}
	}
	if q.getHLLsByMetricInRangeStmt != nil {
		if cerr := q.getHLLsByMetricInRangeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHLLsByMetricInRangeStmt: %w", cerr)
		}
	}
	if q.insertDailyStatsSummaryStmt != nil {
		if cerr := q.insertDailyStatsSummaryStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertDailyStatsSummaryStmt: %w", cerr)
		}
	}
	if q.upsertCursorStmt != nil {
		if cerr := q.upsertCursorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertCursorStmt: %w", cerr)
		}
	}
	if q.upsertHLLStmt != nil {
		if cerr := q.upsertHLLStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertHLLStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                            DBTX
	tx                            *sql.Tx
	deleteOldHLLStmt              *sql.Stmt
	getActiveHLLMetricsStmt       *sql.Stmt
	getAllDailyStatsSummariesStmt *sql.Stmt
	getCursorStmt                 *sql.Stmt
	getDailyStatsSummaryStmt      *sql.Stmt
	getHLLStmt                    *sql.Stmt
	getHLLsByMetricInRangeStmt    *sql.Stmt
	insertDailyStatsSummaryStmt   *sql.Stmt
	upsertCursorStmt              *sql.Stmt
	upsertHLLStmt                 *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                            tx,
		tx:                            tx,
		deleteOldHLLStmt:              q.deleteOldHLLStmt,
		getActiveHLLMetricsStmt:       q.getActiveHLLMetricsStmt,
		getAllDailyStatsSummariesStmt: q.getAllDailyStatsSummariesStmt,
		getCursorStmt:                 q.getCursorStmt,
		getDailyStatsSummaryStmt:      q.getDailyStatsSummaryStmt,
		getHLLStmt:                    q.getHLLStmt,
		getHLLsByMetricInRangeStmt:    q.getHLLsByMetricInRangeStmt,
		insertDailyStatsSummaryStmt:   q.insertDailyStatsSummaryStmt,
		upsertCursorStmt:              q.upsertCursorStmt,
		upsertHLLStmt:                 q.upsertHLLStmt,
	}
}

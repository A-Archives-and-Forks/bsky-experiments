// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: mpls.sql

package store_queries

import (
	"context"
)

const actorHasLabel = `-- name: ActorHasLabel :one
SELECT EXISTS(
        SELECT 1
        FROM actor_labels
        WHERE actor_did = $1
            AND label = $2
    )
`

type ActorHasLabelParams struct {
	ActorDid string `json:"actor_did"`
	Label    string `json:"label"`
}

func (q *Queries) ActorHasLabel(ctx context.Context, arg ActorHasLabelParams) (bool, error) {
	row := q.queryRow(ctx, q.actorHasLabelStmt, actorHasLabel, arg.ActorDid, arg.Label)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createActorLabel = `-- name: CreateActorLabel :exec
INSERT INTO actor_labels(actor_did, label)
VALUES ($1, $2)
`

type CreateActorLabelParams struct {
	ActorDid string `json:"actor_did"`
	Label    string `json:"label"`
}

func (q *Queries) CreateActorLabel(ctx context.Context, arg CreateActorLabelParams) error {
	_, err := q.exec(ctx, q.createActorLabelStmt, createActorLabel, arg.ActorDid, arg.Label)
	return err
}

const createMPLS = `-- name: CreateMPLS :exec
INSERT INTO mpls(actor_did, rkey)
VALUES ($1, $2)
`

type CreateMPLSParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) CreateMPLS(ctx context.Context, arg CreateMPLSParams) error {
	_, err := q.exec(ctx, q.createMPLSStmt, createMPLS, arg.ActorDid, arg.Rkey)
	return err
}

const deleteActorLabel = `-- name: DeleteActorLabel :exec
DELETE FROM actor_labels
WHERE actor_did = $1
    AND label = $2
`

type DeleteActorLabelParams struct {
	ActorDid string `json:"actor_did"`
	Label    string `json:"label"`
}

func (q *Queries) DeleteActorLabel(ctx context.Context, arg DeleteActorLabelParams) error {
	_, err := q.exec(ctx, q.deleteActorLabelStmt, deleteActorLabel, arg.ActorDid, arg.Label)
	return err
}

const deleteMPLS = `-- name: DeleteMPLS :exec
DELETE FROM mpls
WHERE actor_did = $1
    AND rkey = $2
`

type DeleteMPLSParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) DeleteMPLS(ctx context.Context, arg DeleteMPLSParams) error {
	_, err := q.exec(ctx, q.deleteMPLSStmt, deleteMPLS, arg.ActorDid, arg.Rkey)
	return err
}

const getMPLS = `-- name: GetMPLS :one
SELECT actor_did, rkey
FROM mpls
WHERE actor_did = $1
    AND rkey = $2
`

type GetMPLSParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) GetMPLS(ctx context.Context, arg GetMPLSParams) (Mpl, error) {
	row := q.queryRow(ctx, q.getMPLSStmt, getMPLS, arg.ActorDid, arg.Rkey)
	var i Mpl
	err := row.Scan(&i.ActorDid, &i.Rkey)
	return i, err
}

const listActorLabels = `-- name: ListActorLabels :many
SELECT label
FROM actor_labels
WHERE actor_did = $1
ORDER BY label DESC
`

func (q *Queries) ListActorLabels(ctx context.Context, actorDid string) ([]string, error) {
	rows, err := q.query(ctx, q.listActorLabelsStmt, listActorLabels, actorDid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var label string
		if err := rows.Scan(&label); err != nil {
			return nil, err
		}
		items = append(items, label)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listActorsByLabel = `-- name: ListActorsByLabel :many
SELECT actor_did
FROM actor_labels
WHERE label = $1
ORDER BY actor_did DESC
`

func (q *Queries) ListActorsByLabel(ctx context.Context, label string) ([]string, error) {
	rows, err := q.query(ctx, q.listActorsByLabelStmt, listActorsByLabel, label)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var actor_did string
		if err := rows.Scan(&actor_did); err != nil {
			return nil, err
		}
		items = append(items, actor_did)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMPLS = `-- name: ListMPLS :many
SELECT actor_did, rkey
FROM mpls
WHERE rkey < $1
ORDER BY rkey DESC
LIMIT $2
`

type ListMPLSParams struct {
	Rkey  string `json:"rkey"`
	Limit int32  `json:"limit"`
}

func (q *Queries) ListMPLS(ctx context.Context, arg ListMPLSParams) ([]Mpl, error) {
	rows, err := q.query(ctx, q.listMPLSStmt, listMPLS, arg.Rkey, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Mpl
	for rows.Next() {
		var i Mpl
		if err := rows.Scan(&i.ActorDid, &i.Rkey); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const trimMPLS = `-- name: TrimMPLS :exec
DELETE FROM mpls
WHERE rkey < $1
`

func (q *Queries) TrimMPLS(ctx context.Context, rkey string) error {
	_, err := q.exec(ctx, q.trimMPLSStmt, trimMPLS, rkey)
	return err
}

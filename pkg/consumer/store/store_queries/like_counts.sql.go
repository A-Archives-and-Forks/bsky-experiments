// Code generated by sqlc. DO NOT EDIT.
// source: like_counts.sql

package store_queries

import (
	"context"
)

const decrementLikeCountByN = `-- name: DecrementLikeCountByN :exec
INSERT INTO like_counts (
        actor_did,
        ns,
        rkey,
        num_likes
    )
VALUES (
        $1,
        $2,
        $3,
        $4
    ) ON CONFLICT (actor_did, ns, rkey) DO
UPDATE
SET num_likes = like_counts.num_likes - $4
`

type DecrementLikeCountByNParams struct {
	ActorDid string `json:"actor_did"`
	Ns       string `json:"ns"`
	Rkey     string `json:"rkey"`
	NumLikes int64  `json:"num_likes"`
}

func (q *Queries) DecrementLikeCountByN(ctx context.Context, arg DecrementLikeCountByNParams) error {
	_, err := q.exec(ctx, q.decrementLikeCountByNStmt, decrementLikeCountByN,
		arg.ActorDid,
		arg.Ns,
		arg.Rkey,
		arg.NumLikes,
	)
	return err
}

const deleteLikeCount = `-- name: DeleteLikeCount :exec
DELETE FROM like_counts
WHERE actor_did = $1
    AND ns = $2
    AND rkey = $3
`

type DeleteLikeCountParams struct {
	ActorDid string `json:"actor_did"`
	Ns       string `json:"ns"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) DeleteLikeCount(ctx context.Context, arg DeleteLikeCountParams) error {
	_, err := q.exec(ctx, q.deleteLikeCountStmt, deleteLikeCount, arg.ActorDid, arg.Ns, arg.Rkey)
	return err
}

const getLikeCount = `-- name: GetLikeCount :one
SELECT actor_did, ns, rkey, num_likes, updated_at
FROM like_counts
WHERE actor_did = $1
    AND ns = $2
    AND rkey = $3
`

type GetLikeCountParams struct {
	ActorDid string `json:"actor_did"`
	Ns       string `json:"ns"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) GetLikeCount(ctx context.Context, arg GetLikeCountParams) (LikeCount, error) {
	row := q.queryRow(ctx, q.getLikeCountStmt, getLikeCount, arg.ActorDid, arg.Ns, arg.Rkey)
	var i LikeCount
	err := row.Scan(
		&i.ActorDid,
		&i.Ns,
		&i.Rkey,
		&i.NumLikes,
		&i.UpdatedAt,
	)
	return i, err
}

const getLikeCountsByActor = `-- name: GetLikeCountsByActor :many
SELECT actor_did, ns, rkey, num_likes, updated_at
FROM like_counts
WHERE actor_did = $1
ORDER BY updated_at DESC
LIMIT $2
`

type GetLikeCountsByActorParams struct {
	ActorDid string `json:"actor_did"`
	Limit    int32  `json:"limit"`
}

func (q *Queries) GetLikeCountsByActor(ctx context.Context, arg GetLikeCountsByActorParams) ([]LikeCount, error) {
	rows, err := q.query(ctx, q.getLikeCountsByActorStmt, getLikeCountsByActor, arg.ActorDid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LikeCount
	for rows.Next() {
		var i LikeCount
		if err := rows.Scan(
			&i.ActorDid,
			&i.Ns,
			&i.Rkey,
			&i.NumLikes,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLikeCountsByActorAndNamespace = `-- name: GetLikeCountsByActorAndNamespace :many
SELECT actor_did, ns, rkey, num_likes, updated_at
FROM like_counts
WHERE actor_did = $1
    AND ns = $2
ORDER BY updated_at DESC
LIMIT $3
`

type GetLikeCountsByActorAndNamespaceParams struct {
	ActorDid string `json:"actor_did"`
	Ns       string `json:"ns"`
	Limit    int32  `json:"limit"`
}

func (q *Queries) GetLikeCountsByActorAndNamespace(ctx context.Context, arg GetLikeCountsByActorAndNamespaceParams) ([]LikeCount, error) {
	rows, err := q.query(ctx, q.getLikeCountsByActorAndNamespaceStmt, getLikeCountsByActorAndNamespace, arg.ActorDid, arg.Ns, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []LikeCount
	for rows.Next() {
		var i LikeCount
		if err := rows.Scan(
			&i.ActorDid,
			&i.Ns,
			&i.Rkey,
			&i.NumLikes,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const incrementLikeCountByN = `-- name: IncrementLikeCountByN :exec
INSERT INTO like_counts (
        actor_did,
        ns,
        rkey,
        num_likes
    )
VALUES (
        $1,
        $2,
        $3,
        $4
    ) ON CONFLICT (actor_did, ns, rkey) DO
UPDATE
SET num_likes = like_counts.num_likes + $4
`

type IncrementLikeCountByNParams struct {
	ActorDid string `json:"actor_did"`
	Ns       string `json:"ns"`
	Rkey     string `json:"rkey"`
	NumLikes int64  `json:"num_likes"`
}

func (q *Queries) IncrementLikeCountByN(ctx context.Context, arg IncrementLikeCountByNParams) error {
	_, err := q.exec(ctx, q.incrementLikeCountByNStmt, incrementLikeCountByN,
		arg.ActorDid,
		arg.Ns,
		arg.Rkey,
		arg.NumLikes,
	)
	return err
}

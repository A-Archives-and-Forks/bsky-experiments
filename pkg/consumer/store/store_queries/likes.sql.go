// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: likes.sql

package store_queries

import (
	"context"
	"database/sql"
	"time"
)

const createLike = `-- name: CreateLike :exec
INSERT INTO likes (actor_uid, rkey, subj, created_at)
VALUES (
        $1,
        $2,
        $3,
        $4
    )
`

type CreateLikeParams struct {
	ActorUid  int64        `json:"actor_uid"`
	Rkey      string       `json:"rkey"`
	Subj      int64        `json:"subj"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) error {
	_, err := q.exec(ctx, q.createLikeStmt, createLike,
		arg.ActorUid,
		arg.Rkey,
		arg.Subj,
		arg.CreatedAt,
	)
	return err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes
WHERE actor_uid = $1
    AND rkey = $2
`

type DeleteLikeParams struct {
	ActorUid int64  `json:"actor_uid"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.exec(ctx, q.deleteLikeStmt, deleteLike, arg.ActorUid, arg.Rkey)
	return err
}

const getLike = `-- name: GetLike :one
SELECT l.actor_uid, l.rkey, l.subj, l.created_at, l.inserted_at,
    s.actor_did AS subject_actor_did,
    c.name AS subject_namespace,
    s.rkey AS subject_rkey
FROM likes l
    JOIN subjects s ON l.subj = s.id
    JOIN collections c ON s.col = c.id
WHERE l.actor_uid = $1
    AND l.rkey = $2
LIMIT 1
`

type GetLikeParams struct {
	ActorUid int64  `json:"actor_uid"`
	Rkey     string `json:"rkey"`
}

type GetLikeRow struct {
	ActorUid         int64        `json:"actor_uid"`
	Rkey             string       `json:"rkey"`
	Subj             int64        `json:"subj"`
	CreatedAt        sql.NullTime `json:"created_at"`
	InsertedAt       time.Time    `json:"inserted_at"`
	SubjectActorDid  string       `json:"subject_actor_did"`
	SubjectNamespace string       `json:"subject_namespace"`
	SubjectRkey      string       `json:"subject_rkey"`
}

func (q *Queries) GetLike(ctx context.Context, arg GetLikeParams) (GetLikeRow, error) {
	row := q.queryRow(ctx, q.getLikeStmt, getLike, arg.ActorUid, arg.Rkey)
	var i GetLikeRow
	err := row.Scan(
		&i.ActorUid,
		&i.Rkey,
		&i.Subj,
		&i.CreatedAt,
		&i.InsertedAt,
		&i.SubjectActorDid,
		&i.SubjectNamespace,
		&i.SubjectRkey,
	)
	return i, err
}

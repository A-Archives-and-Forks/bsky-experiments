// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: likes.sql

package store_queries

import (
	"context"
	"database/sql"
)

const createLike = `-- name: CreateLike :exec
INSERT INTO likes (
        actor_did,
        rkey,
        subject_actor_did,
        subject_namespace,
        subject_rkey,
        created_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6
    )
`

type CreateLikeParams struct {
	ActorDid         string       `json:"actor_did"`
	Rkey             string       `json:"rkey"`
	SubjectActorDid  string       `json:"subject_actor_did"`
	SubjectNamespace string       `json:"subject_namespace"`
	SubjectRkey      string       `json:"subject_rkey"`
	CreatedAt        sql.NullTime `json:"created_at"`
}

func (q *Queries) CreateLike(ctx context.Context, arg CreateLikeParams) error {
	_, err := q.exec(ctx, q.createLikeStmt, createLike,
		arg.ActorDid,
		arg.Rkey,
		arg.SubjectActorDid,
		arg.SubjectNamespace,
		arg.SubjectRkey,
		arg.CreatedAt,
	)
	return err
}

const deleteLike = `-- name: DeleteLike :exec
DELETE FROM likes
WHERE actor_did = $1
    AND rkey = $2
`

type DeleteLikeParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) DeleteLike(ctx context.Context, arg DeleteLikeParams) error {
	_, err := q.exec(ctx, q.deleteLikeStmt, deleteLike, arg.ActorDid, arg.Rkey)
	return err
}

const getLike = `-- name: GetLike :one
SELECT actor_did, rkey, subject_actor_did, subject_namespace, subject_rkey, created_at, inserted_at
FROM likes
WHERE actor_did = $1
    AND rkey = $2
`

type GetLikeParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) GetLike(ctx context.Context, arg GetLikeParams) (Like, error) {
	row := q.queryRow(ctx, q.getLikeStmt, getLike, arg.ActorDid, arg.Rkey)
	var i Like
	err := row.Scan(
		&i.ActorDid,
		&i.Rkey,
		&i.SubjectActorDid,
		&i.SubjectNamespace,
		&i.SubjectRkey,
		&i.CreatedAt,
		&i.InsertedAt,
	)
	return i, err
}

const getLikesByActor = `-- name: GetLikesByActor :many
SELECT actor_did, rkey, subject_actor_did, subject_namespace, subject_rkey, created_at, inserted_at
FROM likes
WHERE actor_did = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetLikesByActorParams struct {
	ActorDid string `json:"actor_did"`
	Limit    int32  `json:"limit"`
}

func (q *Queries) GetLikesByActor(ctx context.Context, arg GetLikesByActorParams) ([]Like, error) {
	rows, err := q.query(ctx, q.getLikesByActorStmt, getLikesByActor, arg.ActorDid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ActorDid,
			&i.Rkey,
			&i.SubjectActorDid,
			&i.SubjectNamespace,
			&i.SubjectRkey,
			&i.CreatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getLikesBySubject = `-- name: GetLikesBySubject :many
SELECT actor_did, rkey, subject_actor_did, subject_namespace, subject_rkey, created_at, inserted_at
FROM likes
WHERE subject_actor_did = $1
    AND subject_namespace = $2
    AND subject_rkey = $3
ORDER BY created_at DESC
LIMIT $4
`

type GetLikesBySubjectParams struct {
	SubjectActorDid  string `json:"subject_actor_did"`
	SubjectNamespace string `json:"subject_namespace"`
	SubjectRkey      string `json:"subject_rkey"`
	Limit            int32  `json:"limit"`
}

func (q *Queries) GetLikesBySubject(ctx context.Context, arg GetLikesBySubjectParams) ([]Like, error) {
	rows, err := q.query(ctx, q.getLikesBySubjectStmt, getLikesBySubject,
		arg.SubjectActorDid,
		arg.SubjectNamespace,
		arg.SubjectRkey,
		arg.Limit,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Like
	for rows.Next() {
		var i Like
		if err := rows.Scan(
			&i.ActorDid,
			&i.Rkey,
			&i.SubjectActorDid,
			&i.SubjectNamespace,
			&i.SubjectRkey,
			&i.CreatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: recent_post_labels.sql

package store_queries

import (
	"context"
	"database/sql"
)

const createRecentPostLabel = `-- name: CreateRecentPostLabel :exec
INSERT INTO recent_post_labels(actor_did, rkey, label, subject_id)
VALUES ($1, $2, $3, $4)
`

type CreateRecentPostLabelParams struct {
	ActorDid  string        `json:"actor_did"`
	Rkey      string        `json:"rkey"`
	Label     string        `json:"label"`
	SubjectID sql.NullInt64 `json:"subject_id"`
}

func (q *Queries) CreateRecentPostLabel(ctx context.Context, arg CreateRecentPostLabelParams) error {
	_, err := q.exec(ctx, q.createRecentPostLabelStmt, createRecentPostLabel,
		arg.ActorDid,
		arg.Rkey,
		arg.Label,
		arg.SubjectID,
	)
	return err
}

const deleteRecentPostLabel = `-- name: DeleteRecentPostLabel :exec
DELETE FROM recent_post_labels
WHERE actor_did = $1
    AND rkey = $2
    AND label = $3
`

type DeleteRecentPostLabelParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
	Label    string `json:"label"`
}

func (q *Queries) DeleteRecentPostLabel(ctx context.Context, arg DeleteRecentPostLabelParams) error {
	_, err := q.exec(ctx, q.deleteRecentPostLabelStmt, deleteRecentPostLabel, arg.ActorDid, arg.Rkey, arg.Label)
	return err
}

const listRecentPostLabels = `-- name: ListRecentPostLabels :many
SELECT label
FROM recent_post_labels
WHERE actor_did = $1
    AND rkey = $2
ORDER BY label ASC
`

type ListRecentPostLabelsParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) ListRecentPostLabels(ctx context.Context, arg ListRecentPostLabelsParams) ([]string, error) {
	rows, err := q.query(ctx, q.listRecentPostLabelsStmt, listRecentPostLabels, arg.ActorDid, arg.Rkey)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var label string
		if err := rows.Scan(&label); err != nil {
			return nil, err
		}
		items = append(items, label)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentPostsByLabelHot = `-- name: ListRecentPostsByLabelHot :many
WITH filtered_posts AS (
    SELECT subject_id,
        score
    FROM recent_posts_with_score
    WHERE score < coalesce($3::float, 100000)
)
SELECT l.actor_did,
    l.rkey,
    fp.score
FROM filtered_posts fp
    JOIN recent_post_labels l ON l.subject_id = fp.subject_id
WHERE l.label = $1
ORDER BY fp.score DESC
LIMIT $2
`

type ListRecentPostsByLabelHotParams struct {
	Label string          `json:"label"`
	Limit int32           `json:"limit"`
	Score sql.NullFloat64 `json:"score"`
}

type ListRecentPostsByLabelHotRow struct {
	ActorDid string  `json:"actor_did"`
	Rkey     string  `json:"rkey"`
	Score    float64 `json:"score"`
}

func (q *Queries) ListRecentPostsByLabelHot(ctx context.Context, arg ListRecentPostsByLabelHotParams) ([]ListRecentPostsByLabelHotRow, error) {
	rows, err := q.query(ctx, q.listRecentPostsByLabelHotStmt, listRecentPostsByLabelHot, arg.Label, arg.Limit, arg.Score)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListRecentPostsByLabelHotRow
	for rows.Next() {
		var i ListRecentPostsByLabelHotRow
		if err := rows.Scan(&i.ActorDid, &i.Rkey, &i.Score); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const trimRecentPostLabels = `-- name: TrimRecentPostLabels :exec
DELETE FROM recent_post_labels
WHERE rkey < $1
`

func (q *Queries) TrimRecentPostLabels(ctx context.Context, rkey string) error {
	_, err := q.exec(ctx, q.trimRecentPostLabelsStmt, trimRecentPostLabels, rkey)
	return err
}

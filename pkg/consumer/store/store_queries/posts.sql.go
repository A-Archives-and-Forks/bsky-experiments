// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: posts.sql

package store_queries

import (
	"context"
	"database/sql"
)

const createPost = `-- name: CreatePost :exec
INSERT INTO posts (
        actor_did,
        rkey,
        content,
        parent_post_actor_did,
        parent_post_rkey,
        parent_relationship,
        root_post_actor_did,
        root_post_rkey,
        has_embedded_media,
        created_at
    )
VALUES (
        $1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7,
        $8,
        $9,
        $10
    )
`

type CreatePostParams struct {
	ActorDid           string         `json:"actor_did"`
	Rkey               string         `json:"rkey"`
	Content            sql.NullString `json:"content"`
	ParentPostActorDid sql.NullString `json:"parent_post_actor_did"`
	ParentPostRkey     sql.NullString `json:"parent_post_rkey"`
	ParentRelationship sql.NullString `json:"parent_relationship"`
	RootPostActorDid   sql.NullString `json:"root_post_actor_did"`
	RootPostRkey       sql.NullString `json:"root_post_rkey"`
	HasEmbeddedMedia   bool           `json:"has_embedded_media"`
	CreatedAt          sql.NullTime   `json:"created_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) error {
	_, err := q.exec(ctx, q.createPostStmt, createPost,
		arg.ActorDid,
		arg.Rkey,
		arg.Content,
		arg.ParentPostActorDid,
		arg.ParentPostRkey,
		arg.ParentRelationship,
		arg.RootPostActorDid,
		arg.RootPostRkey,
		arg.HasEmbeddedMedia,
		arg.CreatedAt,
	)
	return err
}

const deletePost = `-- name: DeletePost :exec
DELETE FROM posts
WHERE actor_did = $1
    AND rkey = $2
`

type DeletePostParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) DeletePost(ctx context.Context, arg DeletePostParams) error {
	_, err := q.exec(ctx, q.deletePostStmt, deletePost, arg.ActorDid, arg.Rkey)
	return err
}

const getPost = `-- name: GetPost :one
SELECT actor_did, rkey, content, parent_post_actor_did, parent_post_rkey, parent_relationship, root_post_actor_did, root_post_rkey, has_embedded_media, created_at, inserted_at
FROM posts
WHERE actor_did = $1
    AND rkey = $2
`

type GetPostParams struct {
	ActorDid string `json:"actor_did"`
	Rkey     string `json:"rkey"`
}

func (q *Queries) GetPost(ctx context.Context, arg GetPostParams) (Post, error) {
	row := q.queryRow(ctx, q.getPostStmt, getPost, arg.ActorDid, arg.Rkey)
	var i Post
	err := row.Scan(
		&i.ActorDid,
		&i.Rkey,
		&i.Content,
		&i.ParentPostActorDid,
		&i.ParentPostRkey,
		&i.ParentRelationship,
		&i.RootPostActorDid,
		&i.RootPostRkey,
		&i.HasEmbeddedMedia,
		&i.CreatedAt,
		&i.InsertedAt,
	)
	return i, err
}

const getPostsByActor = `-- name: GetPostsByActor :many
SELECT actor_did, rkey, content, parent_post_actor_did, parent_post_rkey, parent_relationship, root_post_actor_did, root_post_rkey, has_embedded_media, created_at, inserted_at
FROM posts
WHERE actor_did = $1
ORDER BY created_at DESC
LIMIT $2
`

type GetPostsByActorParams struct {
	ActorDid string `json:"actor_did"`
	Limit    int32  `json:"limit"`
}

func (q *Queries) GetPostsByActor(ctx context.Context, arg GetPostsByActorParams) ([]Post, error) {
	rows, err := q.query(ctx, q.getPostsByActorStmt, getPostsByActor, arg.ActorDid, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ActorDid,
			&i.Rkey,
			&i.Content,
			&i.ParentPostActorDid,
			&i.ParentPostRkey,
			&i.ParentRelationship,
			&i.RootPostActorDid,
			&i.RootPostRkey,
			&i.HasEmbeddedMedia,
			&i.CreatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

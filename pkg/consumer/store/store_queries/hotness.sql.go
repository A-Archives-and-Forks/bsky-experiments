// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: hotness.sql

package store_queries

import (
	"context"
	"database/sql"
)

const getHotPage = `-- name: GetHotPage :many
SELECT actor_did, subject_id, rkey, created_at, inserted_at, score
FROM recent_posts_with_score
WHERE score < coalesce($2::float, 100000)
ORDER BY score DESC
LIMIT $1
`

type GetHotPageParams struct {
	Limit int32           `json:"limit"`
	Score sql.NullFloat64 `json:"score"`
}

func (q *Queries) GetHotPage(ctx context.Context, arg GetHotPageParams) ([]RecentPostsWithScore, error) {
	rows, err := q.query(ctx, q.getHotPageStmt, getHotPage, arg.Limit, arg.Score)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RecentPostsWithScore
	for rows.Next() {
		var i RecentPostsWithScore
		if err := rows.Scan(
			&i.ActorDid,
			&i.SubjectID,
			&i.Rkey,
			&i.CreatedAt,
			&i.InsertedAt,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

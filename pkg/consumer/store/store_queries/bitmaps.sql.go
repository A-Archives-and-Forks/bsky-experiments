// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: bitmaps.sql

package store_queries

import (
	"context"
	"time"
)

const getBitmapByID = `-- name: GetBitmapByID :one
SELECT id, bitmap, updated_at, created_at
FROM stats_bitmaps
WHERE id = $1
`

func (q *Queries) GetBitmapByID(ctx context.Context, id string) (StatsBitmap, error) {
	row := q.queryRow(ctx, q.getBitmapByIDStmt, getBitmapByID, id)
	var i StatsBitmap
	err := row.Scan(
		&i.ID,
		&i.Bitmap,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const upsertBitmap = `-- name: UpsertBitmap :exec
INSERT INTO stats_bitmaps (
        id,
        bitmap,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $3) ON CONFLICT (id) DO
UPDATE
SET bitmap = EXCLUDED.bitmap,
    updated_at = EXCLUDED.updated_at
WHERE stats_bitmaps.id = EXCLUDED.id
`

type UpsertBitmapParams struct {
	ID        string    `json:"id"`
	Bitmap    []byte    `json:"bitmap"`
	CreatedAt time.Time `json:"created_at"`
}

// CREATE TABLE stats_bitmaps (
//
//	id STRING PRIMARY KEY,
//	bitmap BYTEA,
//	updated_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL,
//	created_at TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP NOT NULL
//
// );
func (q *Queries) UpsertBitmap(ctx context.Context, arg UpsertBitmapParams) error {
	_, err := q.exec(ctx, q.upsertBitmapStmt, upsertBitmap, arg.ID, arg.Bitmap, arg.CreatedAt)
	return err
}

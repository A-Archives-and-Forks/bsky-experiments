// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0

package store_queries

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.addEventPostStmt, err = db.PrepareContext(ctx, addEventPost); err != nil {
		return nil, fmt.Errorf("error preparing query AddEventPost: %w", err)
	}
	if q.concludeEventStmt, err = db.PrepareContext(ctx, concludeEvent); err != nil {
		return nil, fmt.Errorf("error preparing query ConcludeEvent: %w", err)
	}
	if q.confirmEventStmt, err = db.PrepareContext(ctx, confirmEvent); err != nil {
		return nil, fmt.Errorf("error preparing query ConfirmEvent: %w", err)
	}
	if q.countBlockersByTargetStmt, err = db.PrepareContext(ctx, countBlockersByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query CountBlockersByTarget: %w", err)
	}
	if q.countBlocksByActorStmt, err = db.PrepareContext(ctx, countBlocksByActor); err != nil {
		return nil, fmt.Errorf("error preparing query CountBlocksByActor: %w", err)
	}
	if q.countFollowersByTargetStmt, err = db.PrepareContext(ctx, countFollowersByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query CountFollowersByTarget: %w", err)
	}
	if q.countFollowsByActorStmt, err = db.PrepareContext(ctx, countFollowsByActor); err != nil {
		return nil, fmt.Errorf("error preparing query CountFollowsByActor: %w", err)
	}
	if q.countFollowsByActorAndTargetStmt, err = db.PrepareContext(ctx, countFollowsByActorAndTarget); err != nil {
		return nil, fmt.Errorf("error preparing query CountFollowsByActorAndTarget: %w", err)
	}
	if q.createBlockStmt, err = db.PrepareContext(ctx, createBlock); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBlock: %w", err)
	}
	if q.createEventStmt, err = db.PrepareContext(ctx, createEvent); err != nil {
		return nil, fmt.Errorf("error preparing query CreateEvent: %w", err)
	}
	if q.createFollowStmt, err = db.PrepareContext(ctx, createFollow); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFollow: %w", err)
	}
	if q.createImageStmt, err = db.PrepareContext(ctx, createImage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateImage: %w", err)
	}
	if q.createLikeStmt, err = db.PrepareContext(ctx, createLike); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLike: %w", err)
	}
	if q.createLikeCountStmt, err = db.PrepareContext(ctx, createLikeCount); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLikeCount: %w", err)
	}
	if q.createPointAssignmentStmt, err = db.PrepareContext(ctx, createPointAssignment); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePointAssignment: %w", err)
	}
	if q.createPostStmt, err = db.PrepareContext(ctx, createPost); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePost: %w", err)
	}
	if q.createRepoBackfillRecordStmt, err = db.PrepareContext(ctx, createRepoBackfillRecord); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRepoBackfillRecord: %w", err)
	}
	if q.createRepostStmt, err = db.PrepareContext(ctx, createRepost); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRepost: %w", err)
	}
	if q.createSentimentJobStmt, err = db.PrepareContext(ctx, createSentimentJob); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSentimentJob: %w", err)
	}
	if q.createSubjectStmt, err = db.PrepareContext(ctx, createSubject); err != nil {
		return nil, fmt.Errorf("error preparing query CreateSubject: %w", err)
	}
	if q.decrementFollowerCountByNStmt, err = db.PrepareContext(ctx, decrementFollowerCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query DecrementFollowerCountByN: %w", err)
	}
	if q.decrementFollowingCountByNStmt, err = db.PrepareContext(ctx, decrementFollowingCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query DecrementFollowingCountByN: %w", err)
	}
	if q.decrementLikeCountByNStmt, err = db.PrepareContext(ctx, decrementLikeCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query DecrementLikeCountByN: %w", err)
	}
	if q.decrementRepostCountByNStmt, err = db.PrepareContext(ctx, decrementRepostCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query DecrementRepostCountByN: %w", err)
	}
	if q.deleteBlockStmt, err = db.PrepareContext(ctx, deleteBlock); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBlock: %w", err)
	}
	if q.deleteEventStmt, err = db.PrepareContext(ctx, deleteEvent); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteEvent: %w", err)
	}
	if q.deleteFollowStmt, err = db.PrepareContext(ctx, deleteFollow); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollow: %w", err)
	}
	if q.deleteFollowerCountStmt, err = db.PrepareContext(ctx, deleteFollowerCount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollowerCount: %w", err)
	}
	if q.deleteFollowingCountStmt, err = db.PrepareContext(ctx, deleteFollowingCount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollowingCount: %w", err)
	}
	if q.deleteFollowsByActorStmt, err = db.PrepareContext(ctx, deleteFollowsByActor); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollowsByActor: %w", err)
	}
	if q.deleteFollowsByTargetStmt, err = db.PrepareContext(ctx, deleteFollowsByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollowsByTarget: %w", err)
	}
	if q.deleteImageStmt, err = db.PrepareContext(ctx, deleteImage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteImage: %w", err)
	}
	if q.deleteImagesForPostStmt, err = db.PrepareContext(ctx, deleteImagesForPost); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteImagesForPost: %w", err)
	}
	if q.deleteLikeStmt, err = db.PrepareContext(ctx, deleteLike); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLike: %w", err)
	}
	if q.deleteLikeCountStmt, err = db.PrepareContext(ctx, deleteLikeCount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLikeCount: %w", err)
	}
	if q.deletePointAssignmentStmt, err = db.PrepareContext(ctx, deletePointAssignment); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePointAssignment: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, deletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.deleteRepostStmt, err = db.PrepareContext(ctx, deleteRepost); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRepost: %w", err)
	}
	if q.deleteRepostCountStmt, err = db.PrepareContext(ctx, deleteRepostCount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteRepostCount: %w", err)
	}
	if q.deleteSentimentJobStmt, err = db.PrepareContext(ctx, deleteSentimentJob); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSentimentJob: %w", err)
	}
	if q.findActorsByHandleStmt, err = db.PrepareContext(ctx, findActorsByHandle); err != nil {
		return nil, fmt.Errorf("error preparing query FindActorsByHandle: %w", err)
	}
	if q.findPotentialFriendsStmt, err = db.PrepareContext(ctx, findPotentialFriends); err != nil {
		return nil, fmt.Errorf("error preparing query FindPotentialFriends: %w", err)
	}
	if q.getActiveEventsForInitiatorStmt, err = db.PrepareContext(ctx, getActiveEventsForInitiator); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveEventsForInitiator: %w", err)
	}
	if q.getActiveEventsForTargetStmt, err = db.PrepareContext(ctx, getActiveEventsForTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetActiveEventsForTarget: %w", err)
	}
	if q.getActorByDIDStmt, err = db.PrepareContext(ctx, getActorByDID); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorByDID: %w", err)
	}
	if q.getActorByHandleStmt, err = db.PrepareContext(ctx, getActorByHandle); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorByHandle: %w", err)
	}
	if q.getActorTypeAheadStmt, err = db.PrepareContext(ctx, getActorTypeAhead); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorTypeAhead: %w", err)
	}
	if q.getActorsForValidationStmt, err = db.PrepareContext(ctx, getActorsForValidation); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorsForValidation: %w", err)
	}
	if q.getActorsWithoutPropicStmt, err = db.PrepareContext(ctx, getActorsWithoutPropic); err != nil {
		return nil, fmt.Errorf("error preparing query GetActorsWithoutPropic: %w", err)
	}
	if q.getBlockStmt, err = db.PrepareContext(ctx, getBlock); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlock: %w", err)
	}
	if q.getBlocksByActorStmt, err = db.PrepareContext(ctx, getBlocksByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlocksByActor: %w", err)
	}
	if q.getBlocksByActorAndTargetStmt, err = db.PrepareContext(ctx, getBlocksByActorAndTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlocksByActorAndTarget: %w", err)
	}
	if q.getBlocksByTargetStmt, err = db.PrepareContext(ctx, getBlocksByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlocksByTarget: %w", err)
	}
	if q.getDailySummariesStmt, err = db.PrepareContext(ctx, getDailySummaries); err != nil {
		return nil, fmt.Errorf("error preparing query GetDailySummaries: %w", err)
	}
	if q.getEventStmt, err = db.PrepareContext(ctx, getEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetEvent: %w", err)
	}
	if q.getEventsForInitiatorStmt, err = db.PrepareContext(ctx, getEventsForInitiator); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventsForInitiator: %w", err)
	}
	if q.getEventsForTargetStmt, err = db.PrepareContext(ctx, getEventsForTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventsForTarget: %w", err)
	}
	if q.getEventsToConcludeStmt, err = db.PrepareContext(ctx, getEventsToConclude); err != nil {
		return nil, fmt.Errorf("error preparing query GetEventsToConclude: %w", err)
	}
	if q.getFollowStmt, err = db.PrepareContext(ctx, getFollow); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollow: %w", err)
	}
	if q.getFollowerCountStmt, err = db.PrepareContext(ctx, getFollowerCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowerCount: %w", err)
	}
	if q.getFollowerPercentilesStmt, err = db.PrepareContext(ctx, getFollowerPercentiles); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowerPercentiles: %w", err)
	}
	if q.getFollowingCountStmt, err = db.PrepareContext(ctx, getFollowingCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowingCount: %w", err)
	}
	if q.getFollowsByActorStmt, err = db.PrepareContext(ctx, getFollowsByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowsByActor: %w", err)
	}
	if q.getFollowsByActorAndTargetStmt, err = db.PrepareContext(ctx, getFollowsByActorAndTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowsByActorAndTarget: %w", err)
	}
	if q.getFollowsByTargetStmt, err = db.PrepareContext(ctx, getFollowsByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowsByTarget: %w", err)
	}
	if q.getHotPageStmt, err = db.PrepareContext(ctx, getHotPage); err != nil {
		return nil, fmt.Errorf("error preparing query GetHotPage: %w", err)
	}
	if q.getImageStmt, err = db.PrepareContext(ctx, getImage); err != nil {
		return nil, fmt.Errorf("error preparing query GetImage: %w", err)
	}
	if q.getImagesForPostStmt, err = db.PrepareContext(ctx, getImagesForPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetImagesForPost: %w", err)
	}
	if q.getLikeStmt, err = db.PrepareContext(ctx, getLike); err != nil {
		return nil, fmt.Errorf("error preparing query GetLike: %w", err)
	}
	if q.getLikeCountStmt, err = db.PrepareContext(ctx, getLikeCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikeCount: %w", err)
	}
	if q.getLikesByActorStmt, err = db.PrepareContext(ctx, getLikesByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesByActor: %w", err)
	}
	if q.getLikesBySubjectStmt, err = db.PrepareContext(ctx, getLikesBySubject); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesBySubject: %w", err)
	}
	if q.getLikesGivenByActorFromToStmt, err = db.PrepareContext(ctx, getLikesGivenByActorFromTo); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesGivenByActorFromTo: %w", err)
	}
	if q.getLikesReceivedByActorFromActorStmt, err = db.PrepareContext(ctx, getLikesReceivedByActorFromActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesReceivedByActorFromActor: %w", err)
	}
	if q.getMyPostsByFuzzyContentStmt, err = db.PrepareContext(ctx, getMyPostsByFuzzyContent); err != nil {
		return nil, fmt.Errorf("error preparing query GetMyPostsByFuzzyContent: %w", err)
	}
	if q.getPointAssignmentStmt, err = db.PrepareContext(ctx, getPointAssignment); err != nil {
		return nil, fmt.Errorf("error preparing query GetPointAssignment: %w", err)
	}
	if q.getPointAssignmentsForActorStmt, err = db.PrepareContext(ctx, getPointAssignmentsForActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetPointAssignmentsForActor: %w", err)
	}
	if q.getPointAssignmentsForEventStmt, err = db.PrepareContext(ctx, getPointAssignmentsForEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetPointAssignmentsForEvent: %w", err)
	}
	if q.getPostStmt, err = db.PrepareContext(ctx, getPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetPost: %w", err)
	}
	if q.getPostWithRepliesStmt, err = db.PrepareContext(ctx, getPostWithReplies); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostWithReplies: %w", err)
	}
	if q.getPostWithSentimentStmt, err = db.PrepareContext(ctx, getPostWithSentiment); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostWithSentiment: %w", err)
	}
	if q.getPostsByActorStmt, err = db.PrepareContext(ctx, getPostsByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByActor: %w", err)
	}
	if q.getPostsByActorsFollowingTargetStmt, err = db.PrepareContext(ctx, getPostsByActorsFollowingTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByActorsFollowingTarget: %w", err)
	}
	if q.getPostsFromNonMootsStmt, err = db.PrepareContext(ctx, getPostsFromNonMoots); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsFromNonMoots: %w", err)
	}
	if q.getRepoBackfillRecordStmt, err = db.PrepareContext(ctx, getRepoBackfillRecord); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepoBackfillRecord: %w", err)
	}
	if q.getRepoBackfillRecordsStmt, err = db.PrepareContext(ctx, getRepoBackfillRecords); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepoBackfillRecords: %w", err)
	}
	if q.getRepostStmt, err = db.PrepareContext(ctx, getRepost); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepost: %w", err)
	}
	if q.getRepostCountStmt, err = db.PrepareContext(ctx, getRepostCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepostCount: %w", err)
	}
	if q.getRepostsByActorStmt, err = db.PrepareContext(ctx, getRepostsByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepostsByActor: %w", err)
	}
	if q.getRepostsBySubjectStmt, err = db.PrepareContext(ctx, getRepostsBySubject); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepostsBySubject: %w", err)
	}
	if q.getSentimentForPostStmt, err = db.PrepareContext(ctx, getSentimentForPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetSentimentForPost: %w", err)
	}
	if q.getTopPostsStmt, err = db.PrepareContext(ctx, getTopPosts); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopPosts: %w", err)
	}
	if q.getTopPostsForActorStmt, err = db.PrepareContext(ctx, getTopPostsForActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopPostsForActor: %w", err)
	}
	if q.getTopUsersByPointsStmt, err = db.PrepareContext(ctx, getTopUsersByPoints); err != nil {
		return nil, fmt.Errorf("error preparing query GetTopUsersByPoints: %w", err)
	}
	if q.getTotalLikesGivenByActorStmt, err = db.PrepareContext(ctx, getTotalLikesGivenByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetTotalLikesGivenByActor: %w", err)
	}
	if q.getTotalLikesReceivedByActorStmt, err = db.PrepareContext(ctx, getTotalLikesReceivedByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetTotalLikesReceivedByActor: %w", err)
	}
	if q.getTotalPointsForActorStmt, err = db.PrepareContext(ctx, getTotalPointsForActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetTotalPointsForActor: %w", err)
	}
	if q.getTotalPointsForEventStmt, err = db.PrepareContext(ctx, getTotalPointsForEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetTotalPointsForEvent: %w", err)
	}
	if q.getUnconfirmedEventStmt, err = db.PrepareContext(ctx, getUnconfirmedEvent); err != nil {
		return nil, fmt.Errorf("error preparing query GetUnconfirmedEvent: %w", err)
	}
	if q.getUnprocessedSentimentJobsStmt, err = db.PrepareContext(ctx, getUnprocessedSentimentJobs); err != nil {
		return nil, fmt.Errorf("error preparing query GetUnprocessedSentimentJobs: %w", err)
	}
	if q.incrementFollowerCountByNStmt, err = db.PrepareContext(ctx, incrementFollowerCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementFollowerCountByN: %w", err)
	}
	if q.incrementFollowingCountByNStmt, err = db.PrepareContext(ctx, incrementFollowingCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementFollowingCountByN: %w", err)
	}
	if q.incrementLikeCountByNStmt, err = db.PrepareContext(ctx, incrementLikeCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementLikeCountByN: %w", err)
	}
	if q.incrementRepostCountByNStmt, err = db.PrepareContext(ctx, incrementRepostCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementRepostCountByN: %w", err)
	}
	if q.setSentimentForPostStmt, err = db.PrepareContext(ctx, setSentimentForPost); err != nil {
		return nil, fmt.Errorf("error preparing query SetSentimentForPost: %w", err)
	}
	if q.upatePointAssignmentStmt, err = db.PrepareContext(ctx, upatePointAssignment); err != nil {
		return nil, fmt.Errorf("error preparing query UpatePointAssignment: %w", err)
	}
	if q.updateActorPropicStmt, err = db.PrepareContext(ctx, updateActorPropic); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateActorPropic: %w", err)
	}
	if q.updateActorsValidationStmt, err = db.PrepareContext(ctx, updateActorsValidation); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateActorsValidation: %w", err)
	}
	if q.updateRepoBackfillRecordStmt, err = db.PrepareContext(ctx, updateRepoBackfillRecord); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRepoBackfillRecord: %w", err)
	}
	if q.upsertActorStmt, err = db.PrepareContext(ctx, upsertActor); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertActor: %w", err)
	}
	if q.upsertActorFromFirehoseStmt, err = db.PrepareContext(ctx, upsertActorFromFirehose); err != nil {
		return nil, fmt.Errorf("error preparing query UpsertActorFromFirehose: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.addEventPostStmt != nil {
		if cerr := q.addEventPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing addEventPostStmt: %w", cerr)
		}
	}
	if q.concludeEventStmt != nil {
		if cerr := q.concludeEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing concludeEventStmt: %w", cerr)
		}
	}
	if q.confirmEventStmt != nil {
		if cerr := q.confirmEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing confirmEventStmt: %w", cerr)
		}
	}
	if q.countBlockersByTargetStmt != nil {
		if cerr := q.countBlockersByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBlockersByTargetStmt: %w", cerr)
		}
	}
	if q.countBlocksByActorStmt != nil {
		if cerr := q.countBlocksByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBlocksByActorStmt: %w", cerr)
		}
	}
	if q.countFollowersByTargetStmt != nil {
		if cerr := q.countFollowersByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFollowersByTargetStmt: %w", cerr)
		}
	}
	if q.countFollowsByActorStmt != nil {
		if cerr := q.countFollowsByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFollowsByActorStmt: %w", cerr)
		}
	}
	if q.countFollowsByActorAndTargetStmt != nil {
		if cerr := q.countFollowsByActorAndTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFollowsByActorAndTargetStmt: %w", cerr)
		}
	}
	if q.createBlockStmt != nil {
		if cerr := q.createBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBlockStmt: %w", cerr)
		}
	}
	if q.createEventStmt != nil {
		if cerr := q.createEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createEventStmt: %w", cerr)
		}
	}
	if q.createFollowStmt != nil {
		if cerr := q.createFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFollowStmt: %w", cerr)
		}
	}
	if q.createImageStmt != nil {
		if cerr := q.createImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createImageStmt: %w", cerr)
		}
	}
	if q.createLikeStmt != nil {
		if cerr := q.createLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLikeStmt: %w", cerr)
		}
	}
	if q.createLikeCountStmt != nil {
		if cerr := q.createLikeCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLikeCountStmt: %w", cerr)
		}
	}
	if q.createPointAssignmentStmt != nil {
		if cerr := q.createPointAssignmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPointAssignmentStmt: %w", cerr)
		}
	}
	if q.createPostStmt != nil {
		if cerr := q.createPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostStmt: %w", cerr)
		}
	}
	if q.createRepoBackfillRecordStmt != nil {
		if cerr := q.createRepoBackfillRecordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRepoBackfillRecordStmt: %w", cerr)
		}
	}
	if q.createRepostStmt != nil {
		if cerr := q.createRepostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRepostStmt: %w", cerr)
		}
	}
	if q.createSentimentJobStmt != nil {
		if cerr := q.createSentimentJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSentimentJobStmt: %w", cerr)
		}
	}
	if q.createSubjectStmt != nil {
		if cerr := q.createSubjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createSubjectStmt: %w", cerr)
		}
	}
	if q.decrementFollowerCountByNStmt != nil {
		if cerr := q.decrementFollowerCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decrementFollowerCountByNStmt: %w", cerr)
		}
	}
	if q.decrementFollowingCountByNStmt != nil {
		if cerr := q.decrementFollowingCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decrementFollowingCountByNStmt: %w", cerr)
		}
	}
	if q.decrementLikeCountByNStmt != nil {
		if cerr := q.decrementLikeCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decrementLikeCountByNStmt: %w", cerr)
		}
	}
	if q.decrementRepostCountByNStmt != nil {
		if cerr := q.decrementRepostCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decrementRepostCountByNStmt: %w", cerr)
		}
	}
	if q.deleteBlockStmt != nil {
		if cerr := q.deleteBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBlockStmt: %w", cerr)
		}
	}
	if q.deleteEventStmt != nil {
		if cerr := q.deleteEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteEventStmt: %w", cerr)
		}
	}
	if q.deleteFollowStmt != nil {
		if cerr := q.deleteFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowStmt: %w", cerr)
		}
	}
	if q.deleteFollowerCountStmt != nil {
		if cerr := q.deleteFollowerCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowerCountStmt: %w", cerr)
		}
	}
	if q.deleteFollowingCountStmt != nil {
		if cerr := q.deleteFollowingCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowingCountStmt: %w", cerr)
		}
	}
	if q.deleteFollowsByActorStmt != nil {
		if cerr := q.deleteFollowsByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowsByActorStmt: %w", cerr)
		}
	}
	if q.deleteFollowsByTargetStmt != nil {
		if cerr := q.deleteFollowsByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowsByTargetStmt: %w", cerr)
		}
	}
	if q.deleteImageStmt != nil {
		if cerr := q.deleteImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteImageStmt: %w", cerr)
		}
	}
	if q.deleteImagesForPostStmt != nil {
		if cerr := q.deleteImagesForPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteImagesForPostStmt: %w", cerr)
		}
	}
	if q.deleteLikeStmt != nil {
		if cerr := q.deleteLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLikeStmt: %w", cerr)
		}
	}
	if q.deleteLikeCountStmt != nil {
		if cerr := q.deleteLikeCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLikeCountStmt: %w", cerr)
		}
	}
	if q.deletePointAssignmentStmt != nil {
		if cerr := q.deletePointAssignmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePointAssignmentStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.deleteRepostStmt != nil {
		if cerr := q.deleteRepostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRepostStmt: %w", cerr)
		}
	}
	if q.deleteRepostCountStmt != nil {
		if cerr := q.deleteRepostCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteRepostCountStmt: %w", cerr)
		}
	}
	if q.deleteSentimentJobStmt != nil {
		if cerr := q.deleteSentimentJobStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSentimentJobStmt: %w", cerr)
		}
	}
	if q.findActorsByHandleStmt != nil {
		if cerr := q.findActorsByHandleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findActorsByHandleStmt: %w", cerr)
		}
	}
	if q.findPotentialFriendsStmt != nil {
		if cerr := q.findPotentialFriendsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findPotentialFriendsStmt: %w", cerr)
		}
	}
	if q.getActiveEventsForInitiatorStmt != nil {
		if cerr := q.getActiveEventsForInitiatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveEventsForInitiatorStmt: %w", cerr)
		}
	}
	if q.getActiveEventsForTargetStmt != nil {
		if cerr := q.getActiveEventsForTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActiveEventsForTargetStmt: %w", cerr)
		}
	}
	if q.getActorByDIDStmt != nil {
		if cerr := q.getActorByDIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorByDIDStmt: %w", cerr)
		}
	}
	if q.getActorByHandleStmt != nil {
		if cerr := q.getActorByHandleStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorByHandleStmt: %w", cerr)
		}
	}
	if q.getActorTypeAheadStmt != nil {
		if cerr := q.getActorTypeAheadStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorTypeAheadStmt: %w", cerr)
		}
	}
	if q.getActorsForValidationStmt != nil {
		if cerr := q.getActorsForValidationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorsForValidationStmt: %w", cerr)
		}
	}
	if q.getActorsWithoutPropicStmt != nil {
		if cerr := q.getActorsWithoutPropicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getActorsWithoutPropicStmt: %w", cerr)
		}
	}
	if q.getBlockStmt != nil {
		if cerr := q.getBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlockStmt: %w", cerr)
		}
	}
	if q.getBlocksByActorStmt != nil {
		if cerr := q.getBlocksByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlocksByActorStmt: %w", cerr)
		}
	}
	if q.getBlocksByActorAndTargetStmt != nil {
		if cerr := q.getBlocksByActorAndTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlocksByActorAndTargetStmt: %w", cerr)
		}
	}
	if q.getBlocksByTargetStmt != nil {
		if cerr := q.getBlocksByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlocksByTargetStmt: %w", cerr)
		}
	}
	if q.getDailySummariesStmt != nil {
		if cerr := q.getDailySummariesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getDailySummariesStmt: %w", cerr)
		}
	}
	if q.getEventStmt != nil {
		if cerr := q.getEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventStmt: %w", cerr)
		}
	}
	if q.getEventsForInitiatorStmt != nil {
		if cerr := q.getEventsForInitiatorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventsForInitiatorStmt: %w", cerr)
		}
	}
	if q.getEventsForTargetStmt != nil {
		if cerr := q.getEventsForTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventsForTargetStmt: %w", cerr)
		}
	}
	if q.getEventsToConcludeStmt != nil {
		if cerr := q.getEventsToConcludeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getEventsToConcludeStmt: %w", cerr)
		}
	}
	if q.getFollowStmt != nil {
		if cerr := q.getFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowStmt: %w", cerr)
		}
	}
	if q.getFollowerCountStmt != nil {
		if cerr := q.getFollowerCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowerCountStmt: %w", cerr)
		}
	}
	if q.getFollowerPercentilesStmt != nil {
		if cerr := q.getFollowerPercentilesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowerPercentilesStmt: %w", cerr)
		}
	}
	if q.getFollowingCountStmt != nil {
		if cerr := q.getFollowingCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowingCountStmt: %w", cerr)
		}
	}
	if q.getFollowsByActorStmt != nil {
		if cerr := q.getFollowsByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowsByActorStmt: %w", cerr)
		}
	}
	if q.getFollowsByActorAndTargetStmt != nil {
		if cerr := q.getFollowsByActorAndTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowsByActorAndTargetStmt: %w", cerr)
		}
	}
	if q.getFollowsByTargetStmt != nil {
		if cerr := q.getFollowsByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowsByTargetStmt: %w", cerr)
		}
	}
	if q.getHotPageStmt != nil {
		if cerr := q.getHotPageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHotPageStmt: %w", cerr)
		}
	}
	if q.getImageStmt != nil {
		if cerr := q.getImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImageStmt: %w", cerr)
		}
	}
	if q.getImagesForPostStmt != nil {
		if cerr := q.getImagesForPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImagesForPostStmt: %w", cerr)
		}
	}
	if q.getLikeStmt != nil {
		if cerr := q.getLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikeStmt: %w", cerr)
		}
	}
	if q.getLikeCountStmt != nil {
		if cerr := q.getLikeCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikeCountStmt: %w", cerr)
		}
	}
	if q.getLikesByActorStmt != nil {
		if cerr := q.getLikesByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesByActorStmt: %w", cerr)
		}
	}
	if q.getLikesBySubjectStmt != nil {
		if cerr := q.getLikesBySubjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesBySubjectStmt: %w", cerr)
		}
	}
	if q.getLikesGivenByActorFromToStmt != nil {
		if cerr := q.getLikesGivenByActorFromToStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesGivenByActorFromToStmt: %w", cerr)
		}
	}
	if q.getLikesReceivedByActorFromActorStmt != nil {
		if cerr := q.getLikesReceivedByActorFromActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesReceivedByActorFromActorStmt: %w", cerr)
		}
	}
	if q.getMyPostsByFuzzyContentStmt != nil {
		if cerr := q.getMyPostsByFuzzyContentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMyPostsByFuzzyContentStmt: %w", cerr)
		}
	}
	if q.getPointAssignmentStmt != nil {
		if cerr := q.getPointAssignmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPointAssignmentStmt: %w", cerr)
		}
	}
	if q.getPointAssignmentsForActorStmt != nil {
		if cerr := q.getPointAssignmentsForActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPointAssignmentsForActorStmt: %w", cerr)
		}
	}
	if q.getPointAssignmentsForEventStmt != nil {
		if cerr := q.getPointAssignmentsForEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPointAssignmentsForEventStmt: %w", cerr)
		}
	}
	if q.getPostStmt != nil {
		if cerr := q.getPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostStmt: %w", cerr)
		}
	}
	if q.getPostWithRepliesStmt != nil {
		if cerr := q.getPostWithRepliesStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostWithRepliesStmt: %w", cerr)
		}
	}
	if q.getPostWithSentimentStmt != nil {
		if cerr := q.getPostWithSentimentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostWithSentimentStmt: %w", cerr)
		}
	}
	if q.getPostsByActorStmt != nil {
		if cerr := q.getPostsByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByActorStmt: %w", cerr)
		}
	}
	if q.getPostsByActorsFollowingTargetStmt != nil {
		if cerr := q.getPostsByActorsFollowingTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByActorsFollowingTargetStmt: %w", cerr)
		}
	}
	if q.getPostsFromNonMootsStmt != nil {
		if cerr := q.getPostsFromNonMootsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsFromNonMootsStmt: %w", cerr)
		}
	}
	if q.getRepoBackfillRecordStmt != nil {
		if cerr := q.getRepoBackfillRecordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepoBackfillRecordStmt: %w", cerr)
		}
	}
	if q.getRepoBackfillRecordsStmt != nil {
		if cerr := q.getRepoBackfillRecordsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepoBackfillRecordsStmt: %w", cerr)
		}
	}
	if q.getRepostStmt != nil {
		if cerr := q.getRepostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepostStmt: %w", cerr)
		}
	}
	if q.getRepostCountStmt != nil {
		if cerr := q.getRepostCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepostCountStmt: %w", cerr)
		}
	}
	if q.getRepostsByActorStmt != nil {
		if cerr := q.getRepostsByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepostsByActorStmt: %w", cerr)
		}
	}
	if q.getRepostsBySubjectStmt != nil {
		if cerr := q.getRepostsBySubjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepostsBySubjectStmt: %w", cerr)
		}
	}
	if q.getSentimentForPostStmt != nil {
		if cerr := q.getSentimentForPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getSentimentForPostStmt: %w", cerr)
		}
	}
	if q.getTopPostsStmt != nil {
		if cerr := q.getTopPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopPostsStmt: %w", cerr)
		}
	}
	if q.getTopPostsForActorStmt != nil {
		if cerr := q.getTopPostsForActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopPostsForActorStmt: %w", cerr)
		}
	}
	if q.getTopUsersByPointsStmt != nil {
		if cerr := q.getTopUsersByPointsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTopUsersByPointsStmt: %w", cerr)
		}
	}
	if q.getTotalLikesGivenByActorStmt != nil {
		if cerr := q.getTotalLikesGivenByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTotalLikesGivenByActorStmt: %w", cerr)
		}
	}
	if q.getTotalLikesReceivedByActorStmt != nil {
		if cerr := q.getTotalLikesReceivedByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTotalLikesReceivedByActorStmt: %w", cerr)
		}
	}
	if q.getTotalPointsForActorStmt != nil {
		if cerr := q.getTotalPointsForActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTotalPointsForActorStmt: %w", cerr)
		}
	}
	if q.getTotalPointsForEventStmt != nil {
		if cerr := q.getTotalPointsForEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getTotalPointsForEventStmt: %w", cerr)
		}
	}
	if q.getUnconfirmedEventStmt != nil {
		if cerr := q.getUnconfirmedEventStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUnconfirmedEventStmt: %w", cerr)
		}
	}
	if q.getUnprocessedSentimentJobsStmt != nil {
		if cerr := q.getUnprocessedSentimentJobsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUnprocessedSentimentJobsStmt: %w", cerr)
		}
	}
	if q.incrementFollowerCountByNStmt != nil {
		if cerr := q.incrementFollowerCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementFollowerCountByNStmt: %w", cerr)
		}
	}
	if q.incrementFollowingCountByNStmt != nil {
		if cerr := q.incrementFollowingCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementFollowingCountByNStmt: %w", cerr)
		}
	}
	if q.incrementLikeCountByNStmt != nil {
		if cerr := q.incrementLikeCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementLikeCountByNStmt: %w", cerr)
		}
	}
	if q.incrementRepostCountByNStmt != nil {
		if cerr := q.incrementRepostCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementRepostCountByNStmt: %w", cerr)
		}
	}
	if q.setSentimentForPostStmt != nil {
		if cerr := q.setSentimentForPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setSentimentForPostStmt: %w", cerr)
		}
	}
	if q.upatePointAssignmentStmt != nil {
		if cerr := q.upatePointAssignmentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upatePointAssignmentStmt: %w", cerr)
		}
	}
	if q.updateActorPropicStmt != nil {
		if cerr := q.updateActorPropicStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateActorPropicStmt: %w", cerr)
		}
	}
	if q.updateActorsValidationStmt != nil {
		if cerr := q.updateActorsValidationStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateActorsValidationStmt: %w", cerr)
		}
	}
	if q.updateRepoBackfillRecordStmt != nil {
		if cerr := q.updateRepoBackfillRecordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRepoBackfillRecordStmt: %w", cerr)
		}
	}
	if q.upsertActorStmt != nil {
		if cerr := q.upsertActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertActorStmt: %w", cerr)
		}
	}
	if q.upsertActorFromFirehoseStmt != nil {
		if cerr := q.upsertActorFromFirehoseStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing upsertActorFromFirehoseStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                   DBTX
	tx                                   *sql.Tx
	addEventPostStmt                     *sql.Stmt
	concludeEventStmt                    *sql.Stmt
	confirmEventStmt                     *sql.Stmt
	countBlockersByTargetStmt            *sql.Stmt
	countBlocksByActorStmt               *sql.Stmt
	countFollowersByTargetStmt           *sql.Stmt
	countFollowsByActorStmt              *sql.Stmt
	countFollowsByActorAndTargetStmt     *sql.Stmt
	createBlockStmt                      *sql.Stmt
	createEventStmt                      *sql.Stmt
	createFollowStmt                     *sql.Stmt
	createImageStmt                      *sql.Stmt
	createLikeStmt                       *sql.Stmt
	createLikeCountStmt                  *sql.Stmt
	createPointAssignmentStmt            *sql.Stmt
	createPostStmt                       *sql.Stmt
	createRepoBackfillRecordStmt         *sql.Stmt
	createRepostStmt                     *sql.Stmt
	createSentimentJobStmt               *sql.Stmt
	createSubjectStmt                    *sql.Stmt
	decrementFollowerCountByNStmt        *sql.Stmt
	decrementFollowingCountByNStmt       *sql.Stmt
	decrementLikeCountByNStmt            *sql.Stmt
	decrementRepostCountByNStmt          *sql.Stmt
	deleteBlockStmt                      *sql.Stmt
	deleteEventStmt                      *sql.Stmt
	deleteFollowStmt                     *sql.Stmt
	deleteFollowerCountStmt              *sql.Stmt
	deleteFollowingCountStmt             *sql.Stmt
	deleteFollowsByActorStmt             *sql.Stmt
	deleteFollowsByTargetStmt            *sql.Stmt
	deleteImageStmt                      *sql.Stmt
	deleteImagesForPostStmt              *sql.Stmt
	deleteLikeStmt                       *sql.Stmt
	deleteLikeCountStmt                  *sql.Stmt
	deletePointAssignmentStmt            *sql.Stmt
	deletePostStmt                       *sql.Stmt
	deleteRepostStmt                     *sql.Stmt
	deleteRepostCountStmt                *sql.Stmt
	deleteSentimentJobStmt               *sql.Stmt
	findActorsByHandleStmt               *sql.Stmt
	findPotentialFriendsStmt             *sql.Stmt
	getActiveEventsForInitiatorStmt      *sql.Stmt
	getActiveEventsForTargetStmt         *sql.Stmt
	getActorByDIDStmt                    *sql.Stmt
	getActorByHandleStmt                 *sql.Stmt
	getActorTypeAheadStmt                *sql.Stmt
	getActorsForValidationStmt           *sql.Stmt
	getActorsWithoutPropicStmt           *sql.Stmt
	getBlockStmt                         *sql.Stmt
	getBlocksByActorStmt                 *sql.Stmt
	getBlocksByActorAndTargetStmt        *sql.Stmt
	getBlocksByTargetStmt                *sql.Stmt
	getDailySummariesStmt                *sql.Stmt
	getEventStmt                         *sql.Stmt
	getEventsForInitiatorStmt            *sql.Stmt
	getEventsForTargetStmt               *sql.Stmt
	getEventsToConcludeStmt              *sql.Stmt
	getFollowStmt                        *sql.Stmt
	getFollowerCountStmt                 *sql.Stmt
	getFollowerPercentilesStmt           *sql.Stmt
	getFollowingCountStmt                *sql.Stmt
	getFollowsByActorStmt                *sql.Stmt
	getFollowsByActorAndTargetStmt       *sql.Stmt
	getFollowsByTargetStmt               *sql.Stmt
	getHotPageStmt                       *sql.Stmt
	getImageStmt                         *sql.Stmt
	getImagesForPostStmt                 *sql.Stmt
	getLikeStmt                          *sql.Stmt
	getLikeCountStmt                     *sql.Stmt
	getLikesByActorStmt                  *sql.Stmt
	getLikesBySubjectStmt                *sql.Stmt
	getLikesGivenByActorFromToStmt       *sql.Stmt
	getLikesReceivedByActorFromActorStmt *sql.Stmt
	getMyPostsByFuzzyContentStmt         *sql.Stmt
	getPointAssignmentStmt               *sql.Stmt
	getPointAssignmentsForActorStmt      *sql.Stmt
	getPointAssignmentsForEventStmt      *sql.Stmt
	getPostStmt                          *sql.Stmt
	getPostWithRepliesStmt               *sql.Stmt
	getPostWithSentimentStmt             *sql.Stmt
	getPostsByActorStmt                  *sql.Stmt
	getPostsByActorsFollowingTargetStmt  *sql.Stmt
	getPostsFromNonMootsStmt             *sql.Stmt
	getRepoBackfillRecordStmt            *sql.Stmt
	getRepoBackfillRecordsStmt           *sql.Stmt
	getRepostStmt                        *sql.Stmt
	getRepostCountStmt                   *sql.Stmt
	getRepostsByActorStmt                *sql.Stmt
	getRepostsBySubjectStmt              *sql.Stmt
	getSentimentForPostStmt              *sql.Stmt
	getTopPostsStmt                      *sql.Stmt
	getTopPostsForActorStmt              *sql.Stmt
	getTopUsersByPointsStmt              *sql.Stmt
	getTotalLikesGivenByActorStmt        *sql.Stmt
	getTotalLikesReceivedByActorStmt     *sql.Stmt
	getTotalPointsForActorStmt           *sql.Stmt
	getTotalPointsForEventStmt           *sql.Stmt
	getUnconfirmedEventStmt              *sql.Stmt
	getUnprocessedSentimentJobsStmt      *sql.Stmt
	incrementFollowerCountByNStmt        *sql.Stmt
	incrementFollowingCountByNStmt       *sql.Stmt
	incrementLikeCountByNStmt            *sql.Stmt
	incrementRepostCountByNStmt          *sql.Stmt
	setSentimentForPostStmt              *sql.Stmt
	upatePointAssignmentStmt             *sql.Stmt
	updateActorPropicStmt                *sql.Stmt
	updateActorsValidationStmt           *sql.Stmt
	updateRepoBackfillRecordStmt         *sql.Stmt
	upsertActorStmt                      *sql.Stmt
	upsertActorFromFirehoseStmt          *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                   tx,
		tx:                                   tx,
		addEventPostStmt:                     q.addEventPostStmt,
		concludeEventStmt:                    q.concludeEventStmt,
		confirmEventStmt:                     q.confirmEventStmt,
		countBlockersByTargetStmt:            q.countBlockersByTargetStmt,
		countBlocksByActorStmt:               q.countBlocksByActorStmt,
		countFollowersByTargetStmt:           q.countFollowersByTargetStmt,
		countFollowsByActorStmt:              q.countFollowsByActorStmt,
		countFollowsByActorAndTargetStmt:     q.countFollowsByActorAndTargetStmt,
		createBlockStmt:                      q.createBlockStmt,
		createEventStmt:                      q.createEventStmt,
		createFollowStmt:                     q.createFollowStmt,
		createImageStmt:                      q.createImageStmt,
		createLikeStmt:                       q.createLikeStmt,
		createLikeCountStmt:                  q.createLikeCountStmt,
		createPointAssignmentStmt:            q.createPointAssignmentStmt,
		createPostStmt:                       q.createPostStmt,
		createRepoBackfillRecordStmt:         q.createRepoBackfillRecordStmt,
		createRepostStmt:                     q.createRepostStmt,
		createSentimentJobStmt:               q.createSentimentJobStmt,
		createSubjectStmt:                    q.createSubjectStmt,
		decrementFollowerCountByNStmt:        q.decrementFollowerCountByNStmt,
		decrementFollowingCountByNStmt:       q.decrementFollowingCountByNStmt,
		decrementLikeCountByNStmt:            q.decrementLikeCountByNStmt,
		decrementRepostCountByNStmt:          q.decrementRepostCountByNStmt,
		deleteBlockStmt:                      q.deleteBlockStmt,
		deleteEventStmt:                      q.deleteEventStmt,
		deleteFollowStmt:                     q.deleteFollowStmt,
		deleteFollowerCountStmt:              q.deleteFollowerCountStmt,
		deleteFollowingCountStmt:             q.deleteFollowingCountStmt,
		deleteFollowsByActorStmt:             q.deleteFollowsByActorStmt,
		deleteFollowsByTargetStmt:            q.deleteFollowsByTargetStmt,
		deleteImageStmt:                      q.deleteImageStmt,
		deleteImagesForPostStmt:              q.deleteImagesForPostStmt,
		deleteLikeStmt:                       q.deleteLikeStmt,
		deleteLikeCountStmt:                  q.deleteLikeCountStmt,
		deletePointAssignmentStmt:            q.deletePointAssignmentStmt,
		deletePostStmt:                       q.deletePostStmt,
		deleteRepostStmt:                     q.deleteRepostStmt,
		deleteRepostCountStmt:                q.deleteRepostCountStmt,
		deleteSentimentJobStmt:               q.deleteSentimentJobStmt,
		findActorsByHandleStmt:               q.findActorsByHandleStmt,
		findPotentialFriendsStmt:             q.findPotentialFriendsStmt,
		getActiveEventsForInitiatorStmt:      q.getActiveEventsForInitiatorStmt,
		getActiveEventsForTargetStmt:         q.getActiveEventsForTargetStmt,
		getActorByDIDStmt:                    q.getActorByDIDStmt,
		getActorByHandleStmt:                 q.getActorByHandleStmt,
		getActorTypeAheadStmt:                q.getActorTypeAheadStmt,
		getActorsForValidationStmt:           q.getActorsForValidationStmt,
		getActorsWithoutPropicStmt:           q.getActorsWithoutPropicStmt,
		getBlockStmt:                         q.getBlockStmt,
		getBlocksByActorStmt:                 q.getBlocksByActorStmt,
		getBlocksByActorAndTargetStmt:        q.getBlocksByActorAndTargetStmt,
		getBlocksByTargetStmt:                q.getBlocksByTargetStmt,
		getDailySummariesStmt:                q.getDailySummariesStmt,
		getEventStmt:                         q.getEventStmt,
		getEventsForInitiatorStmt:            q.getEventsForInitiatorStmt,
		getEventsForTargetStmt:               q.getEventsForTargetStmt,
		getEventsToConcludeStmt:              q.getEventsToConcludeStmt,
		getFollowStmt:                        q.getFollowStmt,
		getFollowerCountStmt:                 q.getFollowerCountStmt,
		getFollowerPercentilesStmt:           q.getFollowerPercentilesStmt,
		getFollowingCountStmt:                q.getFollowingCountStmt,
		getFollowsByActorStmt:                q.getFollowsByActorStmt,
		getFollowsByActorAndTargetStmt:       q.getFollowsByActorAndTargetStmt,
		getFollowsByTargetStmt:               q.getFollowsByTargetStmt,
		getHotPageStmt:                       q.getHotPageStmt,
		getImageStmt:                         q.getImageStmt,
		getImagesForPostStmt:                 q.getImagesForPostStmt,
		getLikeStmt:                          q.getLikeStmt,
		getLikeCountStmt:                     q.getLikeCountStmt,
		getLikesByActorStmt:                  q.getLikesByActorStmt,
		getLikesBySubjectStmt:                q.getLikesBySubjectStmt,
		getLikesGivenByActorFromToStmt:       q.getLikesGivenByActorFromToStmt,
		getLikesReceivedByActorFromActorStmt: q.getLikesReceivedByActorFromActorStmt,
		getMyPostsByFuzzyContentStmt:         q.getMyPostsByFuzzyContentStmt,
		getPointAssignmentStmt:               q.getPointAssignmentStmt,
		getPointAssignmentsForActorStmt:      q.getPointAssignmentsForActorStmt,
		getPointAssignmentsForEventStmt:      q.getPointAssignmentsForEventStmt,
		getPostStmt:                          q.getPostStmt,
		getPostWithRepliesStmt:               q.getPostWithRepliesStmt,
		getPostWithSentimentStmt:             q.getPostWithSentimentStmt,
		getPostsByActorStmt:                  q.getPostsByActorStmt,
		getPostsByActorsFollowingTargetStmt:  q.getPostsByActorsFollowingTargetStmt,
		getPostsFromNonMootsStmt:             q.getPostsFromNonMootsStmt,
		getRepoBackfillRecordStmt:            q.getRepoBackfillRecordStmt,
		getRepoBackfillRecordsStmt:           q.getRepoBackfillRecordsStmt,
		getRepostStmt:                        q.getRepostStmt,
		getRepostCountStmt:                   q.getRepostCountStmt,
		getRepostsByActorStmt:                q.getRepostsByActorStmt,
		getRepostsBySubjectStmt:              q.getRepostsBySubjectStmt,
		getSentimentForPostStmt:              q.getSentimentForPostStmt,
		getTopPostsStmt:                      q.getTopPostsStmt,
		getTopPostsForActorStmt:              q.getTopPostsForActorStmt,
		getTopUsersByPointsStmt:              q.getTopUsersByPointsStmt,
		getTotalLikesGivenByActorStmt:        q.getTotalLikesGivenByActorStmt,
		getTotalLikesReceivedByActorStmt:     q.getTotalLikesReceivedByActorStmt,
		getTotalPointsForActorStmt:           q.getTotalPointsForActorStmt,
		getTotalPointsForEventStmt:           q.getTotalPointsForEventStmt,
		getUnconfirmedEventStmt:              q.getUnconfirmedEventStmt,
		getUnprocessedSentimentJobsStmt:      q.getUnprocessedSentimentJobsStmt,
		incrementFollowerCountByNStmt:        q.incrementFollowerCountByNStmt,
		incrementFollowingCountByNStmt:       q.incrementFollowingCountByNStmt,
		incrementLikeCountByNStmt:            q.incrementLikeCountByNStmt,
		incrementRepostCountByNStmt:          q.incrementRepostCountByNStmt,
		setSentimentForPostStmt:              q.setSentimentForPostStmt,
		upatePointAssignmentStmt:             q.upatePointAssignmentStmt,
		updateActorPropicStmt:                q.updateActorPropicStmt,
		updateActorsValidationStmt:           q.updateActorsValidationStmt,
		updateRepoBackfillRecordStmt:         q.updateRepoBackfillRecordStmt,
		upsertActorStmt:                      q.upsertActorStmt,
		upsertActorFromFirehoseStmt:          q.upsertActorFromFirehoseStmt,
	}
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1

package store_queries

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.countBlockersByTargetStmt, err = db.PrepareContext(ctx, countBlockersByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query CountBlockersByTarget: %w", err)
	}
	if q.countBlocksByActorStmt, err = db.PrepareContext(ctx, countBlocksByActor); err != nil {
		return nil, fmt.Errorf("error preparing query CountBlocksByActor: %w", err)
	}
	if q.countFollowersByTargetStmt, err = db.PrepareContext(ctx, countFollowersByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query CountFollowersByTarget: %w", err)
	}
	if q.countFollowsByActorStmt, err = db.PrepareContext(ctx, countFollowsByActor); err != nil {
		return nil, fmt.Errorf("error preparing query CountFollowsByActor: %w", err)
	}
	if q.createBlockStmt, err = db.PrepareContext(ctx, createBlock); err != nil {
		return nil, fmt.Errorf("error preparing query CreateBlock: %w", err)
	}
	if q.createFollowStmt, err = db.PrepareContext(ctx, createFollow); err != nil {
		return nil, fmt.Errorf("error preparing query CreateFollow: %w", err)
	}
	if q.createImageStmt, err = db.PrepareContext(ctx, createImage); err != nil {
		return nil, fmt.Errorf("error preparing query CreateImage: %w", err)
	}
	if q.createLikeStmt, err = db.PrepareContext(ctx, createLike); err != nil {
		return nil, fmt.Errorf("error preparing query CreateLike: %w", err)
	}
	if q.createPostStmt, err = db.PrepareContext(ctx, createPost); err != nil {
		return nil, fmt.Errorf("error preparing query CreatePost: %w", err)
	}
	if q.createRepoBackfillRecordStmt, err = db.PrepareContext(ctx, createRepoBackfillRecord); err != nil {
		return nil, fmt.Errorf("error preparing query CreateRepoBackfillRecord: %w", err)
	}
	if q.decrementLikeCountByNStmt, err = db.PrepareContext(ctx, decrementLikeCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query DecrementLikeCountByN: %w", err)
	}
	if q.deleteBlockStmt, err = db.PrepareContext(ctx, deleteBlock); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteBlock: %w", err)
	}
	if q.deleteFollowStmt, err = db.PrepareContext(ctx, deleteFollow); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteFollow: %w", err)
	}
	if q.deleteImageStmt, err = db.PrepareContext(ctx, deleteImage); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteImage: %w", err)
	}
	if q.deleteImagesForPostStmt, err = db.PrepareContext(ctx, deleteImagesForPost); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteImagesForPost: %w", err)
	}
	if q.deleteLikeStmt, err = db.PrepareContext(ctx, deleteLike); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLike: %w", err)
	}
	if q.deleteLikeCountStmt, err = db.PrepareContext(ctx, deleteLikeCount); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteLikeCount: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, deletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.getBlockStmt, err = db.PrepareContext(ctx, getBlock); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlock: %w", err)
	}
	if q.getBlocksByActorStmt, err = db.PrepareContext(ctx, getBlocksByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlocksByActor: %w", err)
	}
	if q.getBlocksByActorAndTargetStmt, err = db.PrepareContext(ctx, getBlocksByActorAndTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlocksByActorAndTarget: %w", err)
	}
	if q.getBlocksByTargetStmt, err = db.PrepareContext(ctx, getBlocksByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetBlocksByTarget: %w", err)
	}
	if q.getFollowStmt, err = db.PrepareContext(ctx, getFollow); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollow: %w", err)
	}
	if q.getFollowsByActorStmt, err = db.PrepareContext(ctx, getFollowsByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowsByActor: %w", err)
	}
	if q.getFollowsByActorAndTargetStmt, err = db.PrepareContext(ctx, getFollowsByActorAndTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowsByActorAndTarget: %w", err)
	}
	if q.getFollowsByTargetStmt, err = db.PrepareContext(ctx, getFollowsByTarget); err != nil {
		return nil, fmt.Errorf("error preparing query GetFollowsByTarget: %w", err)
	}
	if q.getHotPageStmt, err = db.PrepareContext(ctx, getHotPage); err != nil {
		return nil, fmt.Errorf("error preparing query GetHotPage: %w", err)
	}
	if q.getImageStmt, err = db.PrepareContext(ctx, getImage); err != nil {
		return nil, fmt.Errorf("error preparing query GetImage: %w", err)
	}
	if q.getImagesForPostStmt, err = db.PrepareContext(ctx, getImagesForPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetImagesForPost: %w", err)
	}
	if q.getLikeStmt, err = db.PrepareContext(ctx, getLike); err != nil {
		return nil, fmt.Errorf("error preparing query GetLike: %w", err)
	}
	if q.getLikeCountStmt, err = db.PrepareContext(ctx, getLikeCount); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikeCount: %w", err)
	}
	if q.getLikeCountsByActorStmt, err = db.PrepareContext(ctx, getLikeCountsByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikeCountsByActor: %w", err)
	}
	if q.getLikeCountsByActorAndNamespaceStmt, err = db.PrepareContext(ctx, getLikeCountsByActorAndNamespace); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikeCountsByActorAndNamespace: %w", err)
	}
	if q.getLikesByActorStmt, err = db.PrepareContext(ctx, getLikesByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesByActor: %w", err)
	}
	if q.getLikesBySubjectStmt, err = db.PrepareContext(ctx, getLikesBySubject); err != nil {
		return nil, fmt.Errorf("error preparing query GetLikesBySubject: %w", err)
	}
	if q.getPostStmt, err = db.PrepareContext(ctx, getPost); err != nil {
		return nil, fmt.Errorf("error preparing query GetPost: %w", err)
	}
	if q.getPostsByActorStmt, err = db.PrepareContext(ctx, getPostsByActor); err != nil {
		return nil, fmt.Errorf("error preparing query GetPostsByActor: %w", err)
	}
	if q.getRepoBackfillRecordStmt, err = db.PrepareContext(ctx, getRepoBackfillRecord); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepoBackfillRecord: %w", err)
	}
	if q.getRepoBackfillRecordsStmt, err = db.PrepareContext(ctx, getRepoBackfillRecords); err != nil {
		return nil, fmt.Errorf("error preparing query GetRepoBackfillRecords: %w", err)
	}
	if q.incrementLikeCountByNStmt, err = db.PrepareContext(ctx, incrementLikeCountByN); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementLikeCountByN: %w", err)
	}
	if q.updateRepoBackfillRecordStmt, err = db.PrepareContext(ctx, updateRepoBackfillRecord); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateRepoBackfillRecord: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.countBlockersByTargetStmt != nil {
		if cerr := q.countBlockersByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBlockersByTargetStmt: %w", cerr)
		}
	}
	if q.countBlocksByActorStmt != nil {
		if cerr := q.countBlocksByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countBlocksByActorStmt: %w", cerr)
		}
	}
	if q.countFollowersByTargetStmt != nil {
		if cerr := q.countFollowersByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFollowersByTargetStmt: %w", cerr)
		}
	}
	if q.countFollowsByActorStmt != nil {
		if cerr := q.countFollowsByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countFollowsByActorStmt: %w", cerr)
		}
	}
	if q.createBlockStmt != nil {
		if cerr := q.createBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createBlockStmt: %w", cerr)
		}
	}
	if q.createFollowStmt != nil {
		if cerr := q.createFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createFollowStmt: %w", cerr)
		}
	}
	if q.createImageStmt != nil {
		if cerr := q.createImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createImageStmt: %w", cerr)
		}
	}
	if q.createLikeStmt != nil {
		if cerr := q.createLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createLikeStmt: %w", cerr)
		}
	}
	if q.createPostStmt != nil {
		if cerr := q.createPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createPostStmt: %w", cerr)
		}
	}
	if q.createRepoBackfillRecordStmt != nil {
		if cerr := q.createRepoBackfillRecordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createRepoBackfillRecordStmt: %w", cerr)
		}
	}
	if q.decrementLikeCountByNStmt != nil {
		if cerr := q.decrementLikeCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing decrementLikeCountByNStmt: %w", cerr)
		}
	}
	if q.deleteBlockStmt != nil {
		if cerr := q.deleteBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteBlockStmt: %w", cerr)
		}
	}
	if q.deleteFollowStmt != nil {
		if cerr := q.deleteFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteFollowStmt: %w", cerr)
		}
	}
	if q.deleteImageStmt != nil {
		if cerr := q.deleteImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteImageStmt: %w", cerr)
		}
	}
	if q.deleteImagesForPostStmt != nil {
		if cerr := q.deleteImagesForPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteImagesForPostStmt: %w", cerr)
		}
	}
	if q.deleteLikeStmt != nil {
		if cerr := q.deleteLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLikeStmt: %w", cerr)
		}
	}
	if q.deleteLikeCountStmt != nil {
		if cerr := q.deleteLikeCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteLikeCountStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.getBlockStmt != nil {
		if cerr := q.getBlockStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlockStmt: %w", cerr)
		}
	}
	if q.getBlocksByActorStmt != nil {
		if cerr := q.getBlocksByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlocksByActorStmt: %w", cerr)
		}
	}
	if q.getBlocksByActorAndTargetStmt != nil {
		if cerr := q.getBlocksByActorAndTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlocksByActorAndTargetStmt: %w", cerr)
		}
	}
	if q.getBlocksByTargetStmt != nil {
		if cerr := q.getBlocksByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getBlocksByTargetStmt: %w", cerr)
		}
	}
	if q.getFollowStmt != nil {
		if cerr := q.getFollowStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowStmt: %w", cerr)
		}
	}
	if q.getFollowsByActorStmt != nil {
		if cerr := q.getFollowsByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowsByActorStmt: %w", cerr)
		}
	}
	if q.getFollowsByActorAndTargetStmt != nil {
		if cerr := q.getFollowsByActorAndTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowsByActorAndTargetStmt: %w", cerr)
		}
	}
	if q.getFollowsByTargetStmt != nil {
		if cerr := q.getFollowsByTargetStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getFollowsByTargetStmt: %w", cerr)
		}
	}
	if q.getHotPageStmt != nil {
		if cerr := q.getHotPageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getHotPageStmt: %w", cerr)
		}
	}
	if q.getImageStmt != nil {
		if cerr := q.getImageStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImageStmt: %w", cerr)
		}
	}
	if q.getImagesForPostStmt != nil {
		if cerr := q.getImagesForPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getImagesForPostStmt: %w", cerr)
		}
	}
	if q.getLikeStmt != nil {
		if cerr := q.getLikeStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikeStmt: %w", cerr)
		}
	}
	if q.getLikeCountStmt != nil {
		if cerr := q.getLikeCountStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikeCountStmt: %w", cerr)
		}
	}
	if q.getLikeCountsByActorStmt != nil {
		if cerr := q.getLikeCountsByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikeCountsByActorStmt: %w", cerr)
		}
	}
	if q.getLikeCountsByActorAndNamespaceStmt != nil {
		if cerr := q.getLikeCountsByActorAndNamespaceStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikeCountsByActorAndNamespaceStmt: %w", cerr)
		}
	}
	if q.getLikesByActorStmt != nil {
		if cerr := q.getLikesByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesByActorStmt: %w", cerr)
		}
	}
	if q.getLikesBySubjectStmt != nil {
		if cerr := q.getLikesBySubjectStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getLikesBySubjectStmt: %w", cerr)
		}
	}
	if q.getPostStmt != nil {
		if cerr := q.getPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostStmt: %w", cerr)
		}
	}
	if q.getPostsByActorStmt != nil {
		if cerr := q.getPostsByActorStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getPostsByActorStmt: %w", cerr)
		}
	}
	if q.getRepoBackfillRecordStmt != nil {
		if cerr := q.getRepoBackfillRecordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepoBackfillRecordStmt: %w", cerr)
		}
	}
	if q.getRepoBackfillRecordsStmt != nil {
		if cerr := q.getRepoBackfillRecordsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getRepoBackfillRecordsStmt: %w", cerr)
		}
	}
	if q.incrementLikeCountByNStmt != nil {
		if cerr := q.incrementLikeCountByNStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementLikeCountByNStmt: %w", cerr)
		}
	}
	if q.updateRepoBackfillRecordStmt != nil {
		if cerr := q.updateRepoBackfillRecordStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateRepoBackfillRecordStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                                   DBTX
	tx                                   *sql.Tx
	countBlockersByTargetStmt            *sql.Stmt
	countBlocksByActorStmt               *sql.Stmt
	countFollowersByTargetStmt           *sql.Stmt
	countFollowsByActorStmt              *sql.Stmt
	createBlockStmt                      *sql.Stmt
	createFollowStmt                     *sql.Stmt
	createImageStmt                      *sql.Stmt
	createLikeStmt                       *sql.Stmt
	createPostStmt                       *sql.Stmt
	createRepoBackfillRecordStmt         *sql.Stmt
	decrementLikeCountByNStmt            *sql.Stmt
	deleteBlockStmt                      *sql.Stmt
	deleteFollowStmt                     *sql.Stmt
	deleteImageStmt                      *sql.Stmt
	deleteImagesForPostStmt              *sql.Stmt
	deleteLikeStmt                       *sql.Stmt
	deleteLikeCountStmt                  *sql.Stmt
	deletePostStmt                       *sql.Stmt
	getBlockStmt                         *sql.Stmt
	getBlocksByActorStmt                 *sql.Stmt
	getBlocksByActorAndTargetStmt        *sql.Stmt
	getBlocksByTargetStmt                *sql.Stmt
	getFollowStmt                        *sql.Stmt
	getFollowsByActorStmt                *sql.Stmt
	getFollowsByActorAndTargetStmt       *sql.Stmt
	getFollowsByTargetStmt               *sql.Stmt
	getHotPageStmt                       *sql.Stmt
	getImageStmt                         *sql.Stmt
	getImagesForPostStmt                 *sql.Stmt
	getLikeStmt                          *sql.Stmt
	getLikeCountStmt                     *sql.Stmt
	getLikeCountsByActorStmt             *sql.Stmt
	getLikeCountsByActorAndNamespaceStmt *sql.Stmt
	getLikesByActorStmt                  *sql.Stmt
	getLikesBySubjectStmt                *sql.Stmt
	getPostStmt                          *sql.Stmt
	getPostsByActorStmt                  *sql.Stmt
	getRepoBackfillRecordStmt            *sql.Stmt
	getRepoBackfillRecordsStmt           *sql.Stmt
	incrementLikeCountByNStmt            *sql.Stmt
	updateRepoBackfillRecordStmt         *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                                   tx,
		tx:                                   tx,
		countBlockersByTargetStmt:            q.countBlockersByTargetStmt,
		countBlocksByActorStmt:               q.countBlocksByActorStmt,
		countFollowersByTargetStmt:           q.countFollowersByTargetStmt,
		countFollowsByActorStmt:              q.countFollowsByActorStmt,
		createBlockStmt:                      q.createBlockStmt,
		createFollowStmt:                     q.createFollowStmt,
		createImageStmt:                      q.createImageStmt,
		createLikeStmt:                       q.createLikeStmt,
		createPostStmt:                       q.createPostStmt,
		createRepoBackfillRecordStmt:         q.createRepoBackfillRecordStmt,
		decrementLikeCountByNStmt:            q.decrementLikeCountByNStmt,
		deleteBlockStmt:                      q.deleteBlockStmt,
		deleteFollowStmt:                     q.deleteFollowStmt,
		deleteImageStmt:                      q.deleteImageStmt,
		deleteImagesForPostStmt:              q.deleteImagesForPostStmt,
		deleteLikeStmt:                       q.deleteLikeStmt,
		deleteLikeCountStmt:                  q.deleteLikeCountStmt,
		deletePostStmt:                       q.deletePostStmt,
		getBlockStmt:                         q.getBlockStmt,
		getBlocksByActorStmt:                 q.getBlocksByActorStmt,
		getBlocksByActorAndTargetStmt:        q.getBlocksByActorAndTargetStmt,
		getBlocksByTargetStmt:                q.getBlocksByTargetStmt,
		getFollowStmt:                        q.getFollowStmt,
		getFollowsByActorStmt:                q.getFollowsByActorStmt,
		getFollowsByActorAndTargetStmt:       q.getFollowsByActorAndTargetStmt,
		getFollowsByTargetStmt:               q.getFollowsByTargetStmt,
		getHotPageStmt:                       q.getHotPageStmt,
		getImageStmt:                         q.getImageStmt,
		getImagesForPostStmt:                 q.getImagesForPostStmt,
		getLikeStmt:                          q.getLikeStmt,
		getLikeCountStmt:                     q.getLikeCountStmt,
		getLikeCountsByActorStmt:             q.getLikeCountsByActorStmt,
		getLikeCountsByActorAndNamespaceStmt: q.getLikeCountsByActorAndNamespaceStmt,
		getLikesByActorStmt:                  q.getLikesByActorStmt,
		getLikesBySubjectStmt:                q.getLikesBySubjectStmt,
		getPostStmt:                          q.getPostStmt,
		getPostsByActorStmt:                  q.getPostsByActorStmt,
		getRepoBackfillRecordStmt:            q.getRepoBackfillRecordStmt,
		getRepoBackfillRecordsStmt:           q.getRepoBackfillRecordsStmt,
		incrementLikeCountByNStmt:            q.incrementLikeCountByNStmt,
		updateRepoBackfillRecordStmt:         q.updateRepoBackfillRecordStmt,
	}
}

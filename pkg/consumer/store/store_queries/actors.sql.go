// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: actors.sql

package store_queries

import (
	"context"
	"database/sql"
)

const findActorsByHandle = `-- name: FindActorsByHandle :many
SELECT did, handle, pro_pic_cid, created_at, updated_at, inserted_at
FROM actors
WHERE handle ILIKE concat('%', $1, '%')
`

func (q *Queries) FindActorsByHandle(ctx context.Context, concat interface{}) ([]Actor, error) {
	rows, err := q.query(ctx, q.findActorsByHandleStmt, findActorsByHandle, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(
			&i.Did,
			&i.Handle,
			&i.ProPicCid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActorByDID = `-- name: GetActorByDID :one
SELECT did, handle, pro_pic_cid, created_at, updated_at, inserted_at
FROM actors
WHERE did = $1
`

func (q *Queries) GetActorByDID(ctx context.Context, did string) (Actor, error) {
	row := q.queryRow(ctx, q.getActorByDIDStmt, getActorByDID, did)
	var i Actor
	err := row.Scan(
		&i.Did,
		&i.Handle,
		&i.ProPicCid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InsertedAt,
	)
	return i, err
}

const getActorByHandle = `-- name: GetActorByHandle :one
SELECT did, handle, pro_pic_cid, created_at, updated_at, inserted_at
FROM actors
WHERE handle = $1
`

func (q *Queries) GetActorByHandle(ctx context.Context, handle string) (Actor, error) {
	row := q.queryRow(ctx, q.getActorByHandleStmt, getActorByHandle, handle)
	var i Actor
	err := row.Scan(
		&i.Did,
		&i.Handle,
		&i.ProPicCid,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InsertedAt,
	)
	return i, err
}

const getActorTypeAhead = `-- name: GetActorTypeAhead :many
SELECT did,
    handle,
    actors.created_at,
    CASE
        WHEN f.actor_did IS NOT NULL
        AND f2.actor_did IS NOT NULL THEN similarity(
            handle,
            concat('%', $2::text, '%')
        ) + 1
        WHEN f.actor_did IS NOT NULL THEN similarity(
            handle,
            concat('%', $2::text, '%')
        ) + 0.5
        ELSE similarity(
            handle,
            concat('%', $2::text, '%')
        )
    END::float AS score
FROM actors
    LEFT JOIN follows f ON f.target_did = did
    AND f.actor_did = $3
    LEFT JOIN follows f2 ON f2.target_did = $3
    AND f2.actor_did = did
WHERE handle ilike concat('%', $2::text, '%')
    AND NOT EXISTS (
        SELECT 1
        FROM blocks b
        WHERE (
                b.actor_did = $3
                AND b.target_did = did
            )
            OR (
                b.actor_did = did
                AND b.target_did = $3
            )
    )
ORDER BY score DESC
LIMIT $1
`

type GetActorTypeAheadParams struct {
	Limit    int32  `json:"limit"`
	Query    string `json:"query"`
	ActorDid string `json:"actor_did"`
}

type GetActorTypeAheadRow struct {
	Did       string       `json:"did"`
	Handle    string       `json:"handle"`
	CreatedAt sql.NullTime `json:"created_at"`
	Score     float64      `json:"score"`
}

func (q *Queries) GetActorTypeAhead(ctx context.Context, arg GetActorTypeAheadParams) ([]GetActorTypeAheadRow, error) {
	rows, err := q.query(ctx, q.getActorTypeAheadStmt, getActorTypeAhead, arg.Limit, arg.Query, arg.ActorDid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetActorTypeAheadRow
	for rows.Next() {
		var i GetActorTypeAheadRow
		if err := rows.Scan(
			&i.Did,
			&i.Handle,
			&i.CreatedAt,
			&i.Score,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActorsWithoutPropic = `-- name: GetActorsWithoutPropic :many
SELECT did, handle, pro_pic_cid, created_at, updated_at, inserted_at
FROM actors
WHERE pro_pic_cid IS NULL
LIMIT $1
`

func (q *Queries) GetActorsWithoutPropic(ctx context.Context, limit int32) ([]Actor, error) {
	rows, err := q.query(ctx, q.getActorsWithoutPropicStmt, getActorsWithoutPropic, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(
			&i.Did,
			&i.Handle,
			&i.ProPicCid,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateActorPropic = `-- name: UpdateActorPropic :exec
UPDATE actors
SET pro_pic_cid = $2,
    updated_at = $3
WHERE did = $1
`

type UpdateActorPropicParams struct {
	Did       string         `json:"did"`
	ProPicCid sql.NullString `json:"pro_pic_cid"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateActorPropic(ctx context.Context, arg UpdateActorPropicParams) error {
	_, err := q.exec(ctx, q.updateActorPropicStmt, updateActorPropic, arg.Did, arg.ProPicCid, arg.UpdatedAt)
	return err
}

const upsertActor = `-- name: UpsertActor :exec
INSERT INTO actors (
        did,
        handle,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $3) ON CONFLICT (did) DO
UPDATE
SET handle = EXCLUDED.handle,
    updated_at = EXCLUDED.updated_at
WHERE actors.did = EXCLUDED.did
`

type UpsertActorParams struct {
	Did       string       `json:"did"`
	Handle    string       `json:"handle"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) UpsertActor(ctx context.Context, arg UpsertActorParams) error {
	_, err := q.exec(ctx, q.upsertActorStmt, upsertActor, arg.Did, arg.Handle, arg.CreatedAt)
	return err
}

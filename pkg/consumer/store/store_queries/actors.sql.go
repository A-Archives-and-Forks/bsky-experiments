// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.20.0
// source: actors.sql

package store_queries

import (
	"context"
	"database/sql"
)

const findActorsByHandle = `-- name: FindActorsByHandle :many
SELECT did, handle, created_at, updated_at, inserted_at
FROM actors
WHERE handle ILIKE concat('%', $1, '%')
`

func (q *Queries) FindActorsByHandle(ctx context.Context, concat interface{}) ([]Actor, error) {
	rows, err := q.query(ctx, q.findActorsByHandleStmt, findActorsByHandle, concat)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Actor
	for rows.Next() {
		var i Actor
		if err := rows.Scan(
			&i.Did,
			&i.Handle,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.InsertedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getActorByDID = `-- name: GetActorByDID :one
SELECT did, handle, created_at, updated_at, inserted_at
FROM actors
WHERE did = $1
`

func (q *Queries) GetActorByDID(ctx context.Context, did string) (Actor, error) {
	row := q.queryRow(ctx, q.getActorByDIDStmt, getActorByDID, did)
	var i Actor
	err := row.Scan(
		&i.Did,
		&i.Handle,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InsertedAt,
	)
	return i, err
}

const getActorByHandle = `-- name: GetActorByHandle :one
SELECT did, handle, created_at, updated_at, inserted_at
FROM actors
WHERE handle = $1
`

func (q *Queries) GetActorByHandle(ctx context.Context, handle string) (Actor, error) {
	row := q.queryRow(ctx, q.getActorByHandleStmt, getActorByHandle, handle)
	var i Actor
	err := row.Scan(
		&i.Did,
		&i.Handle,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.InsertedAt,
	)
	return i, err
}

const upsertActor = `-- name: UpsertActor :exec
INSERT INTO actors (
        did,
        handle,
        created_at,
        updated_at
    )
VALUES ($1, $2, $3, $3) ON CONFLICT (did) DO
UPDATE
SET handle = EXCLUDED.handle,
    updated_at = EXCLUDED.updated_at
WHERE actors.did = EXCLUDED.did
`

type UpsertActorParams struct {
	Did       string       `json:"did"`
	Handle    string       `json:"handle"`
	CreatedAt sql.NullTime `json:"created_at"`
}

func (q *Queries) UpsertActor(ctx context.Context, arg UpsertActorParams) error {
	_, err := q.exec(ctx, q.upsertActorStmt, upsertActor, arg.Did, arg.Handle, arg.CreatedAt)
	return err
}
